{% from 'neo/macros' import getBlockId %}

{% set neoSettings = craft.app.plugins.getPlugin('neo').settings %}
{% set type = block.type %}
{% set typeTabs = type.getFieldLayout().getTabs() %}
{% set typeName = type.name|t('site') %}
{% set hasTabs = typeTabs is not empty %}
{% set isParent = static and block.children.exists() or not static and type.childBlocks is not null and type.childBlocks is not empty %}
{% set collapsed = neoSettings.collapseAllBlocks or block.collapsed %}
{% set blockId = getBlockId(block) %}
{% set isNew = block.id is null %}
{% set hasErrors = block.hasErrors() %}
{% set showFormAndTabs = hasTabs or isParent %}
{% set renderedForm = null %}
{% set formTabs = null %}
{% set visibleLayoutElements = {} %}
{% set ignorePermissions = not neoSettings.enableBlockTypeUserPermissions or type.ignorePermissions %}

{# Get the errors specific to the block (i.e. not subfield errors) #}
{% set blockErrors = [] %}
{% for attribute, errors in block.getErrors() %}
    {% if attribute[:5] == '__NEO' %}
        {% set blockErrors = blockErrors|merge(errors) %}
    {% endif %}
{% endfor %}
{% set errorList -%}
    {%- if blockErrors is not empty %}
        <div class="ni_block_errors">
            {% include '_includes/forms/errorList' with { errors: blockErrors } %}
        </div>
    {% endif -%}
{%- endset %}

{% set baseInputName = "#{handle}[blocks][uid:#{block.uid}]" %}
{% set actionBtnLabel = "#{typeName} #{'Actions'|t('neo')}" %}
{% set actionMenuId = "neoblock-action-menu-#{blockId}" %}

{% set actionBtnAttributes = {
    class: ['btn', 'action-btn', 'menubtn'],
    type: 'button',
    role: 'button',
    title: 'Actions'|t('neo'),
    aria: {
        controls: actionMenuId,
        label: actionBtnLabel,
    },
    data: {
        'disclosure-trigger': true,
        'neo-b': "#{blockId}.button.actions",
    },
} %}

{% set actionMenuItems = showFormAndTabs ? [
    {
        icon: 'down-left-and-up-right-to-center',
        label: 'Collapse'|t('neo'),
        attributes: {
            data: {
                action: 'collapse',
            },
        },
        liAttributes: {
            class: collapsed ? [
                'hidden',
            ],
        },
    },
    {
        icon: 'up-right-and-down-left-from-center',
        label: 'Expand'|t('neo'),
        attributes: {
            data: {
                action: 'expand',
            },
        },
        liAttributes: {
            class: not collapsed ? [
                'hidden',
            ],
        },
    },
] : [] %}

{% set actionMenuItems = actionMenuItems|merge([
    {
        icon: 'circle-dashed',
        label: 'Disable'|t('neo'),
        attributes: {
            data: {
                action: 'disable',
            },
        },
    },
    {
        icon: 'circle',
        label: 'Enable'|t('neo'),
        attributes: {
            data: {
                action: 'enable',
            },
        },
        liAttributes: {
            class: [
                'hidden',
            ],
        },
    },
    {
        icon: 'arrow-up',
        label: 'Move up'|t('neo'),
        attributes: {
            data: {
                action: 'moveUp',
            },
        },
    },
    {
        icon: 'arrow-down',
        label: 'Move down'|t('neo'),
        attributes: {
            data: {
                action: 'moveDown',
            },
        },
    },
    {
        hr: true,
    },
    {
        icon: 'plus',
        label: 'Add block above'|t('neo'),
        attributes: {
            data: {
                action: 'add',
            },
        },
    },
]) %}

{% if ignorePermissions or currentUser.can("neo-createBlocks:#{type.uid}") %}
    {% set actionMenuItems = actionMenuItems|push({
        icon: 'field',
        label: 'Copy'|t('neo'),
        attributes: {
            data: {
                action: 'copy',
            },
        },
    }) %}
{% endif %}

{% set actionMenuItems = actionMenuItems|push({
    icon: 'brush',
    label: 'Paste'|t('neo'),
    attributes: {
        data: {
            action: 'paste',
        },
    },
}) %}

{% if ignorePermissions or currentUser.can("neo-createBlocks:#{type.uid}") %}
    {% set actionMenuItems = actionMenuItems|push({
        icon: 'share',
        label: 'Clone'|t('neo'),
        attributes: {
            data: {
                action: 'duplicate',
            },
        },
    }) %}
{% endif %}

{% if ignorePermissions or currentUser.can("neo-deleteBlocks:#{type.uid}") %}
    {% set actionMenuItems = actionMenuItems|merge([
        {
            hr: true,
        },
        {
            icon: 'trash',
            label: 'Delete'|t('neo'),
            destructive: true,
            attributes: {
                data: {
                    action: 'delete',
                },
            },
        },
    ]) %}
{% endif %}

{# If this block either has tabs or is a parent, get the form HTML now #}
{# Done like this so we can: #}
{# 1. use `createForm()` without repeatedly namespacing the child blocks #}
{# 2. get the form tabs at the same time #}
{% if showFormAndTabs %}
    {% set renderedForm %}
        {% namespace baseInputName %}
            {% set layoutForm = block.getFieldLayout().createForm(block, static) %}
            {% set formTabs = layoutForm.tabs %}
            {% set visibleLayoutElements = layoutForm.getVisibleElements() %}
            {{ layoutForm.render()|raw }}
        {% endnamespace %}
    {% endset %}
{% endif %}

{% set blockTypeHandleLabel %}{% if currentUser.getPreference('showFieldHandles') %}
    <div class="ni_block_topbar_item handle" data-neo-b="{{ blockId }}.container.handle">
        {% include '_includes/forms/copytextbtn' with {
            id: "#{handle}-blocks-#{blockId}-#{type.handle}-attribute",
            class: ['code', 'small', 'light'],
            value: type.handle,
        } %}
    </div>
{% endif %}{% endset %}

{% tag 'div' with {
    class: [
        'ni_block',
        "ni_block--#{type.handle}",
        collapsed ? 'is-collapsed' : 'is-expanded',
        not hasTabs and not isParent ? 'is-empty',
        isParent ? 'is-parent',
        hasErrors ? 'has-errors',
        neoSettings.enableBlockTypeUserPermissions and not type.ignorePermissions and not currentUser.can("neo-editBlocks:#{type.uid}") ? 'is-disabled-for-user',
    ]|filter,
    style: {
        'border-color': type.color.cssVar(100) ?? null,
    }|filter,
    data: {
        'neo-b-id': blockId,
        'neo-b-uuid': block.uid,
        'neo-b-name': "#{typeName}",
    },
} %}
    {% if not static %}
        {{ hiddenInput("#{handle}[sortOrder][]", block.uid, {'data-neo-b': blockId ~ '.input.sortOrder'}) }}
        {{ hiddenInput("#{baseInputName}[level]", block.level, {'data-neo-b': blockId ~ '.input.level'}) }}
        {{ hiddenInput("#{baseInputName}[type]", type.handle, {'data-neo-b': blockId ~ '.input.type'}) }}
        {{ hiddenInput("#{baseInputName}[enabled]", block.enabled ? '1' : '', {'data-neo-b': blockId ~ '.input.enabled'}) }}
        {% if isFresh ?? false %}
            {{ hiddenInput("#{baseInputName}[fresh]", '1') }}
        {% endif %}
        {% if not isNew %}
            {% do view.registerDeltaName(baseInputName) %}
        {% endif %}
    {% endif %}

    {% tag 'div' with {
        class: 'ni_block_topbar',
        style: {
            'background-color': type.color.cssVar(50) ?? null,
            '--custom-text-color': type.color.cssVar(900) ?? null,
        }|filter,
        data: {
            'neo-b': "#{blockId}.container.topbar",
        },
    } %}
        <div class="ni_block_topbar_left" data-neo-b="{{ blockId }}.container.topbarLeft">
            {% if neoSettings.blockTypeIconSelectMode == 'sources' and type.icon %}
                {{ tag('div', {
                    class: [
                        'ni_block_topbar_item',
                        'cp-icon',
                        type.color.value ?? null,
                    ]|filter,
                    html: iconSvg(type.icon.contents),
                }) }}
            {% elseif neoSettings.blockTypeIconSelectMode == 'path' and type.iconPath %}
                {{ tag('div', {
                    class: [
                        'ni_block_topbar_item',
                        'cp-icon',
                        type.color.value ?? null,
                    ]|filter,
                    html: iconSvg(type.iconPath),
                }) }}
            {% endif %}
            <div class="ni_block_topbar_item title">
                <span class="blocktype{{ hasErrors ? ' has-errors' }}" data-neo-b="{{ blockId }}.select">{{ typeName }}</span>{#
                #}{% if block.hasErrors() %}<span data-icon="alert" aria-label="{{ 'Error'|t('neo') }}"></span>{% endif %}
            </div>
            {{ blockTypeHandleLabel }}
            <div class="ni_block_topbar_item preview-container clip-text">
                <span class="preview" data-neo-b="{{ blockId }}.container.preview">&nbsp;</span>
            </div>
        </div>
        <div class="ni_block_topbar_right" data-neo-b="{{ blockId }}.container.topbarRight">
            {% tag 'div' with {
                class: [
                    'ni_block_topbar_item',
                    'size-full',
                    'tabs',
                ],
                style: {
                    '--custom-sel-tab-shadow-color': entryType.color.cssVar(200) ?? null,
                }|filter,
            } %}
                {% if showFormAndTabs %}
                    <div class="tabs_trigger" data-neo-b="{{ blockId }}.button.toggler"></div>
                    {% include 'neo/_tabs' with {
                        tabs: formTabs,
                        block,
                        blockId,
                    } only %}
                {% endif %}
            {% endtag %}
            <div class="ni_block_topbar_item hidden" data-neo-b="{{ blockId }}.status">
                <div class="status off" title="{{ "Disabled"|t }}"></div>
            </div>
            <div class="ni_block_topbar_item actions">
                <div data-neo-b="{{ blockId }}.select">
                    <div class="checkbox block-checkbox" title="{{ 'Select'|t('neo') }}" aria-label="{{ 'Select'|t('neo') }}"></div>
                </div>
                <div class="block-settings">
                    {% tag 'div' %}
                        {# Button rendered separately to the menu so we can apply data attributes to the menu #}
                        {{ tag('button', actionBtnAttributes) }}
                        {{ disclosureMenu(actionMenuItems, {
                            id: actionMenuId,
                            hiddenLabel: 'Actions'|t('neo'),
                            withButton: false,
                        })|attr({
                            data: {
                                'neo-b': "#{blockId}.container.menu",
                            },
                        }) }}
                    {% endtag %}
                </div>
                <a class="block-reorder move icon" title="{{ 'Reorder'|t('neo') }}" aria-label="{{ 'Reorder'|t('neo') }}" role="button" data-neo-b="{{ blockId }}.button.move"></a>
            </div>
        </div>
    {% endtag %}
    {% if showFormAndTabs %}
        <div class="ni_block_body"{{ collapsed ? ' style="opacity: 0; height: 0;"' }} data-neo-b="{{ blockId }}.container.body">
            {% if hasTabs %}
                <div class="ni_block_content" data-neo-b="{{ blockId }}.container.content">
                    {# Replace the form HTML's child blocks UI element placeholder with actual child blocks #}
                    {% set splitOnChildBlocks = renderedForm|split('<div data-neo-child-blocks-ui-element="' ~ blockId ~ '" data-layout-element="') %}
                    {{ splitOnChildBlocks[0]|raw }}
                    {% if splitOnChildBlocks|length > 1 %}
                        {% set splitAfterChildBlocks = splitOnChildBlocks[1]|split('"></div>', 2) %}
                        {% include 'neo/child-blocks' with { block, handle, static, uid: splitAfterChildBlocks[0] } %}
                        {{ errorList }}
                        {{ splitAfterChildBlocks[1]|raw }}
                    {% endif %}
                </div>
            {% endif %}
            {% if isParent and not type.hasChildBlocksUiElement() %}
                <div class="ni_block_children" data-neo-b="{{ blockId }}.container.children">
                    <div class="ni_blocks" data-neo-b="{{ blockId }}.container.blocks">
                        {% for child in block.children.status(null).all() %}
                            {% include 'neo/block' with { handle, block: child, static } only %}
                        {% endfor %}
                    </div>

                    {% if not static %}
                        <div data-neo-b="{{ blockId }}.container.buttons" class="hidden"></div>
                        <div data-neo-b="{{ blockId }}.container.childrenWarnings" class="hidden">
                            <p class="first warning with-icon">{{ "This Neo field's maximum number of levels has been reached, so no child blocks can be added here."|t('neo') }}</p>
                        </div>
                    {% endif %}
                </div>
                {{ errorList }}
            {% endif %}
        </div>
    {% endif %}
    {% if isParent %}
        <div class="ni_block_collapsed-children" data-neo-b="{{ blockId }}.container.collapsedChildren"></div>
    {% endif %}
{% endtag %}

{% js %}
    Garnish.on(Neo.Input, 'afterInit', (e) => {
        if (e.target.getName() === '{{ handle }}') {
            e.target.setVisibleElements({{ isNew ? "'#{blockId}'"|raw : blockId }}, '{{ visibleLayoutElements|json_encode|raw }}')
        }
    })
{% endjs %}
