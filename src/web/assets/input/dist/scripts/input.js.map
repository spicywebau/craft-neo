{"version":3,"file":"input/dist/scripts/input.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./src/web/assets/input/src/scripts/namespace.js","webpack://craft-neo/./src/web/assets/input/src/scripts/BlockSort.js","webpack://craft-neo/./src/web/assets/input/src/scripts/BlockType.js","webpack://craft-neo/./src/web/assets/input/src/scripts/Group.js","webpack://craft-neo/./src/web/assets/input/src/scripts/Block.js","webpack://craft-neo/./src/web/assets/input/src/scripts/plugins/cpfieldinspect/main.js","webpack://craft-neo/./src/web/assets/input/src/scripts/NewBlockMenu.js","webpack://craft-neo/./src/web/assets/input/src/scripts/Buttons.js","webpack://craft-neo/./src/web/assets/input/src/scripts/ButtonsGrid.js","webpack://craft-neo/./src/web/assets/input/src/scripts/ButtonsList.js","webpack://craft-neo/./src/web/assets/input/src/scripts/Input.js","webpack://craft-neo/./src/web/assets/input/src/scripts/main.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nconst BlockSort = Garnish.Drag.extend({\n\n  $container: null,\n  blocks: null,\n  maxTopBlocks: 0,\n\n  _draggeeBlocks: null,\n\n  init (items, settings) {\n    if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n      settings = items\n      items = null\n    }\n\n    settings = $.extend({}, BlockSort.defaults, settings)\n    settings.axis = Garnish.Y_AXIS\n\n    this.base(items, settings)\n\n    this.$container = settings.container\n    this.blocks = []\n    this.maxTopBlocks = settings.maxTopBlocks\n  },\n\n  getHelperTargetX () {\n    return this.$draggee.offset().left\n  },\n\n  getHelperTargetY () {\n    const magnet = this.settings.magnetStrength\n\n    if (magnet !== 1) {\n      const draggeeOffsetY = this.$draggee.offset().top\n      return draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - draggeeOffsetY) / magnet)\n    }\n\n    return this.base()\n  },\n\n  getBlockByElement ($block) {\n    return this.blocks.find(block => block.$container.is($block))\n  },\n\n  getParentBlock (block) {\n    const $parentBlock = block.$container.parent().closest('.ni_block')\n\n    return $parentBlock.length > 0 ? this.getBlockByElement($parentBlock) : false\n  },\n\n  onDragStart () {\n    const that = this\n\n    this._draggeeBlocks = []\n    this.$draggee.each(function () {\n      that._draggeeBlocks.push(that.getBlockByElement(this))\n    })\n\n    this.base()\n    this._calculateMidpoints()\n  },\n\n  onDrag () {\n    const midpoint = this._getClosestMidpoint()\n\n    if (midpoint) {\n      this._moveDraggeeToBlock(midpoint.block, midpoint.type, midpoint.direction)\n    }\n\n    this.base()\n  },\n\n  onDragStop () {\n    const that = this\n    this.$draggee.each(function () {\n      const $block = $(this)\n      const block = that.getBlockByElement($block)\n      const isRoot = $block.parent().is(that.$container)\n\n      if (isRoot) {\n        block.setLevel(1)\n      } else {\n        const parentBlock = that.getParentBlock(block)\n\n        block.setLevel(parentBlock.getLevel() + 1)\n      }\n\n      $block.find('.ni_block').each(function () {\n        const $childBlock = $(this)\n        const childBlock = that.getBlockByElement($childBlock)\n        const parentBlock = that.getParentBlock(childBlock)\n\n        childBlock.setLevel(parentBlock.getLevel() + 1)\n      })\n    })\n\n    this.returnHelpersToDraggees()\n\n    this.base()\n  },\n\n  addBlock (block) {\n    this.blocks.push(block)\n\n    this.addItems(block.$container)\n  },\n\n  removeBlock (block) {\n    this.blocks = this.blocks.filter(b => b !== block)\n\n    this.removeItems(block.$container)\n  },\n\n  _getClosestMidpoint () {\n    let minDistance = Number.MAX_VALUE\n    let maxDistance = Number.MIN_VALUE\n    let closest = null\n\n    for (const midpoint of this._currentMidpoints) {\n      if (midpoint.direction === BlockSort.DIRECTION_UP) {\n        const compareY = this.mouseY - this.mouseOffsetY\n\n        if (compareY < midpoint.position && midpoint.position < minDistance) {\n          minDistance = midpoint.position\n          closest = midpoint\n        }\n      } else {\n        const compareY = this.mouseY - this.mouseOffsetY + this._draggeeBlockHeight\n\n        if (compareY > midpoint.position && midpoint.position > maxDistance) {\n          maxDistance = midpoint.position\n          closest = midpoint\n        }\n      }\n    }\n\n    return closest\n  },\n\n  _calculateMidpoints () {\n    const margin = 10\n\n    this._draggeeBlockY = this.$draggee.offset().top\n    this._draggeeBlockHeight = this.$draggee.height() + margin\n\n    this._currentMidpoints = []\n\n    for (const block of this.blocks) {\n      if (block.$container.closest(this.$draggee).length === 0) {\n        const midpoints = this._getBlockMidpoints(block)\n\n        for (const type of Object.keys(midpoints)) {\n          const position = midpoints[type]\n          const direction = this._draggeeBlockY > position\n            ? BlockSort.DIRECTION_UP\n            : BlockSort.DIRECTION_DOWN\n\n          this._currentMidpoints.push({\n            block,\n            position,\n            type,\n            direction\n          })\n        }\n      }\n    }\n\n    const endMidpoint = this.$container.offset().top + this.$container.height() + (margin / 2)\n    this._currentMidpoints.push({\n      block: null,\n      position: endMidpoint,\n      type: BlockSort.TYPE_END,\n      direction: BlockSort.DIRECTION_DOWN\n    })\n  },\n\n  _getBlockMidpoints (block) {\n    const midpoints = {}\n\n    const border = 1\n    const margin = 10\n    const padding = 14\n\n    const isAncestorCollapsed = (block.$container.parent().closest('.ni_block.is-collapsed').length > 0)\n\n    if (!isAncestorCollapsed) {\n      const offset = block.$container.offset().top\n\n      const isExpanded = block.isExpanded()\n\n      const blockHeight = block.$container.height()\n      const topbarHeight = block.$topbarContainer.height()\n      const childrenHeight = isExpanded ? block.$childrenContainer.height() : 0\n      const preChildrenContentHeight = !(isExpanded && block.$contentContainer.length > 0)\n        ? 0\n        : block.$childrenContainer.length > 0\n          ? block.$childrenContainer.offset().top - block.$contentContainer.offset().top\n          : block.$contentContainer.height()\n\n      const parentBlock = this.getParentBlock(block)\n\n      if (!parentBlock || this._validateDraggeeChildren(parentBlock)) {\n        midpoints[BlockSort.TYPE_CONTENT] = offset + (topbarHeight + preChildrenContentHeight) / 2\n      }\n\n      if (childrenHeight > 0 && block.isExpanded() && this._validateDraggeeChildren(block)) {\n        const buttonsHeight = block.getButtons().$container.height()\n        midpoints[BlockSort.TYPE_CHILDREN] = offset + blockHeight - border - (padding + buttonsHeight + margin) / 2\n      }\n    }\n\n    return midpoints\n  },\n\n  _moveDraggeeToBlock: function (block, type = BlockSort.TYPE_CONTENT, direction = BlockSort.DIRECTION_DOWN) {\n    const parentBlock = block ? this.getParentBlock(block) : null\n    const validChild = this._validateDraggeeChildren(parentBlock)\n\n    switch (type) {\n      case BlockSort.TYPE_CHILDREN:\n        if (this.$draggee.closest(block.$container).length === 0) {\n          block.$blocksContainer.append(this.$draggee)\n        } else if (validChild) {\n          block.$container.after(this.$draggee)\n        }\n        break\n      case BlockSort.TYPE_END:\n        if (validChild) {\n          this.$container.append(this.$draggee)\n        }\n        break\n      default:\n      {\n        if (direction === BlockSort.DIRECTION_UP) {\n          if (validChild) {\n            block.$container.before(this.$draggee)\n          }\n        } else {\n          if (block.getBlockType().isParent() && block.isExpanded() && this._validateDraggeeChildren(block)) {\n            block.$blocksContainer.prepend(this.$draggee)\n          } else if (validChild) {\n            block.$container.after(this.$draggee)\n          }\n        }\n      }\n    }\n\n    this._updateHelperAppearance()\n    this._calculateMidpoints()\n  },\n\n  _validateDraggeeChildren (block) {\n    // If any of the draggee blocks would exceed the field's max levels, we can't allow the move\n    const field = block ? block.getField() : this._draggeeBlocks[0].getField()\n    const maxLevels = field.getMaxLevels()\n\n    if (maxLevels > 0) {\n      const parentLevel = block ? block.getLevel() : -1\n      const firstDraggeeLevel = this._draggeeBlocks[0].getLevel()\n      const blockExceedsMax = b => b.getLevel() - firstDraggeeLevel + parentLevel + 1 >= maxLevels\n      const blockOrDescendantExceedsMax = b => {\n        const descendants = b.getChildren(field.getBlocks(), true)\n\n        return blockExceedsMax(b) || descendants.some(blockOrDescendantExceedsMax)\n      }\n\n      if (this._draggeeBlocks.filter(blockOrDescendantExceedsMax).length > 0) {\n        return false\n      }\n    }\n\n    // If no block, then we're checking at the top level\n    if (!block) {\n      const that = this\n      const topBlocks = this.$container.children('.ni_block:not(.is-disabled)')\n      let topBlocksCount = topBlocks.length\n\n      for (const draggeeBlock of this._draggeeBlocks) {\n        // Is this block allowed at the top level?\n        if (!draggeeBlock.getBlockType().getTopLevel()) {\n          return false\n        }\n      }\n\n      // If the block is already at the top level, don't count it for max top level block check purposes\n      topBlocks.each(function () {\n        if (that._draggeeBlocks.includes(that.getBlockByElement(this))) {\n          topBlocksCount--\n        }\n      })\n\n      // If this move would exceed the field's max top level blocks, we can't allow it\n      if (this.maxTopBlocks > 0 && topBlocksCount >= this.maxTopBlocks) {\n        return false\n      }\n\n      return true\n    }\n\n    const blockType = block.getBlockType()\n    const maxChildBlocks = blockType.getMaxChildBlocks()\n\n    const blockChildren = block.$childrenContainer.children('.ni_blocks').children('.ni_block')\n    let blockChildCount = blockChildren.length\n    const blockChildrenWithoutDraggees = []\n    const that = this\n\n    // If the block is already a child block, don't count it for validation purposes\n    blockChildren.each(function () {\n      const childBlock = that.getBlockByElement(this)\n\n      if (that._draggeeBlocks.includes(childBlock)) {\n        blockChildCount--\n      } else {\n        blockChildrenWithoutDraggees.push(childBlock)\n      }\n    })\n\n    // Check whether the move would make the potential parent block exceed its max child blocks\n    if (maxChildBlocks > 0 && blockChildCount >= maxChildBlocks) {\n      return false\n    }\n\n    const checkedDraggeeBlocks = []\n\n    for (const draggeeBlock of this._draggeeBlocks) {\n      // Check whether the block is a valid child block for the parent's block type\n      if (!blockType.isValidChildBlock(draggeeBlock)) {\n        return false\n      }\n\n      // Check whether this move would cause any max sibling block type violations, unless we\n      // checked this block already\n      if (checkedDraggeeBlocks.includes(draggeeBlock)) {\n        continue\n      }\n\n      const draggeeBlockType = draggeeBlock.getBlockType()\n      const maxSiblingBlocks = draggeeBlockType.getMaxSiblingBlocks()\n\n      // Also don't bother checking for max sibling block type violations if max sibling\n      // blocks hasn't been set\n      if (maxSiblingBlocks === 0) {\n        continue\n      }\n\n      const draggeeBlocksOfType = this._draggeeBlocks.filter(b => b.getBlockType().getHandle() === draggeeBlockType.getHandle())\n      const siblingBlocksOfType = blockChildrenWithoutDraggees.filter(b => b.getBlockType().getHandle() === draggeeBlockType.getHandle())\n\n      if (siblingBlocksOfType.length + draggeeBlocksOfType.length > maxSiblingBlocks) {\n        return false\n      }\n\n      checkedDraggeeBlocks.push(...draggeeBlocksOfType)\n    }\n\n    return true\n  },\n\n  _updateHelperAppearance () {\n    for (const $helper of this.helpers) {\n      const id = $helper.data('neo-b-id')\n      const block = this.blocks.find(b => b.$container.data('neo-b-id') === id)\n\n      $helper.css({\n        width: block.$container.width() + 1,\n        height: block.$container.height()\n      })\n    }\n  }\n\n}, {\n\n  TYPE_CONTENT: 'content',\n  TYPE_CHILDREN: 'children',\n  TYPE_END: 'end',\n  DIRECTION_UP: 'up',\n  DIRECTION_DOWN: 'down',\n\n  defaults: {\n    container: null,\n    magnetStrength: 1\n  }\n})\n\nexport default BlockSort\n","import Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from './namespace'\n\nconst _defaults = {\n  id: -1,\n  field: null,\n  fieldLayoutId: -1,\n  sortOrder: 0,\n  name: '',\n  handle: '',\n  maxBlocks: 0,\n  maxSiblingBlocks: 0,\n  maxChildBlocks: 0,\n  groupChildBlockTypes: true,\n  childBlocks: false,\n  topLevel: true,\n  tabNames: [],\n  hasChildBlocksUiElement: false,\n  creatableByUser: true,\n  deletableByUser: true,\n  editableByUser: true\n}\n\nexport default Garnish.Base.extend({\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._id = settings.id | 0\n    this._field = settings.field\n    this._fieldLayoutId = settings.fieldLayoutId | 0\n    this._sortOrder = settings.sortOrder | 0\n    this._name = settings.name\n    this._handle = settings.handle\n    this._description = settings.description\n    this._enabled = settings.enabled\n    this._minBlocks = settings.minBlocks | 0\n    this._maxBlocks = settings.maxBlocks | 0\n    this._minSiblingBlocks = settings.maxSiblingBlocks | 0\n    this._maxSiblingBlocks = settings.maxSiblingBlocks | 0\n    this._minChildBlocks = settings.minChildBlocks | 0\n    this._maxChildBlocks = settings.maxChildBlocks | 0\n    this._groupChildBlockTypes = settings.groupChildBlockTypes\n    this._childBlocks = settings.childBlocks\n    this._topLevel = settings.topLevel\n    this._tabNames = settings.tabNames\n    this._html = settings.tabs?.html ?? ''\n    this._js = settings.tabs?.js ?? ''\n    this._defaultVisibleLayoutElements = settings.tabs?.visibleLayoutElements ?? {}\n    this._hasChildBlocksUiElement = settings.hasChildBlocksUiElement\n    this._creatableByUser = settings.creatableByUser\n    this._deletableByUser = settings.deletableByUser\n    this._editableByUser = settings.editableByUser\n  },\n\n  getType () { return 'blockType' },\n  getId () { return this._id },\n  getFieldLayoutId () { return this._fieldLayoutId },\n  getSortOrder () { return this._sortOrder },\n  getName () { return this._name },\n  getHandle () { return this._handle },\n  getDescription () { return this._description },\n  getEnabled () { return this._enabled },\n  getMinBlocks () { return this._minBlocks },\n  getMaxBlocks () { return this._maxBlocks },\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  getGroupChildBlockTypes () { return this._groupChildBlockTypes },\n  getChildBlocks () { return this._childBlocks },\n  getTopLevel () { return this._topLevel },\n  getTabNames () { return this._tabNames },\n\n  /**\n   * @since 4.2.0\n   */\n  async newBlock (settings = {}) {\n    NS.enter(this._field.getNamespace())\n    const data = {\n      namespace: NS.toFieldName(),\n      fieldId: this._field?.getId(),\n      siteId: this._field?.getSiteId(),\n      unsavedIds: this._field?.getUnsavedIds(),\n      blocks: [Object.assign({\n        collapsed: false,\n        enabled: true,\n        level: 1,\n        ownerId: this._field?.getOwnerId(),\n        type: this._id\n      }, settings)]\n    }\n    NS.leave()\n    const response = await Craft.sendActionRequest('POST', 'neo/input/render-blocks', { data })\n\n    return response.data.blocks[0]\n  },\n\n  getDefaultVisibleLayoutElements () {\n    return {\n      ...this._defaultVisibleLayoutElements\n    }\n  },\n\n  getChildBlockItems (items) {\n    const firstPass = items.filter(item => item.getType() === 'group' || this.hasChildBlock(item.getHandle()))\n    return firstPass.filter((item, i) => {\n      if (item.getType() === 'group') {\n        const nextItem = firstPass[i + 1]\n        return nextItem && nextItem.getType() !== 'group'\n      }\n\n      return true\n    })\n  },\n\n  isParent () {\n    const cb = this.getChildBlocks()\n    return cb === true || cb === '*' || (Array.isArray(cb) && cb.length > 0)\n  },\n\n  hasChildBlock (handle) {\n    const cb = this.getChildBlocks()\n    return cb === true || cb === '*' || (Array.isArray(cb) && cb.includes(handle))\n  },\n\n  isValidChildBlock (block) {\n    return this.hasChildBlock(block.getBlockType().getHandle())\n  },\n\n  hasChildBlocksUiElement () {\n    return this._hasChildBlocksUiElement\n  },\n\n  isCreatableByUser () {\n    return this._creatableByUser\n  },\n\n  isDeletableByUser () {\n    return this._deletableByUser\n  },\n\n  isEditableByUser () {\n    return this._editableByUser\n  }\n})\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  id: -1,\n  sortOrder: 0,\n  alwaysShowDropdown: null,\n  name: ''\n}\n\nexport default Garnish.Base.extend({\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._id = settings.id | 0\n    this._sortOrder = settings.sortOrder | 0\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._name = settings.name\n  },\n\n  getType () { return 'group' },\n  getId () { return this._id },\n  getSortOrder () { return this._sortOrder },\n  getName () { return this._name },\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown },\n  isBlank () { return !this._name }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from './namespace'\nimport { addFieldLinks } from './plugins/cpfieldinspect/main'\n\nconst _defaults = {\n  namespace: [],\n  blockType: null,\n  tabs: null,\n  id: null,\n  level: 1,\n  buttons: null,\n  enabled: true,\n  collapsed: false,\n  modified: true,\n  showButtons: true,\n  showBlockTypeHandle: false\n}\n\nconst _escapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;'\n}\n\nfunction _escapeHTML (str) {\n  return str ? str.replace(/[&<>\"'/]/g, s => _escapeMap[s]) : ''\n}\n\nfunction _limit (s, l = 40) {\n  s = s || ''\n  return s.length > l ? s.slice(0, l - 3) + '...' : s\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _field: null,\n  _blockType: null,\n  _initialised: false,\n  _expanded: true,\n  _enabled: true,\n  _modified: true,\n  _initialState: null,\n  _forceModified: false,\n  _html: null,\n  _js: null,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._field = settings.field\n    this._blockType = settings.blockType\n    this._blockHtml = settings.blockHtml\n    this._bodyHtml = settings.bodyHtml\n    this._headHtml = settings.headHtml\n    this._id = settings.id\n    this._enabled = settings.enabled && this._blockType.getEnabled()\n    this._initialEnabled = settings.enabled\n    this._modified = settings.modified\n    this._showButtons = settings.showButtons\n    this._renderOldChildBlocksContainer = !settings.blockType.hasChildBlocksUiElement()\n    this.$container = this._blockHtml\n      ? $(this._blockHtml)\n      : this._field.$container.find(`[data-neo-b-id=${this._id}]`)\n    this._uuid = settings.uuid ?? this.$container.data('neo-b-uuid')\n\n    const $neo = this.$container.find('[data-neo-b]')\n    this.$bodyContainer = $neo.filter(`[data-neo-b=\"${this._id}.container.body\"]`)\n    this.$contentContainer = $neo.filter(`[data-neo-b=\"${this._id}.container.content\"]`)\n    this.$topbarContainer = $neo.filter(`[data-neo-b=\"${this._id}.container.topbar\"]`)\n    this.$topbarLeftContainer = $neo.filter(`[data-neo-b=\"${this._id}.container.topbarLeft\"]`)\n    this.$topbarRightContainer = $neo.filter(`[data-neo-b=\"${this._id}.container.topbarRight\"]`)\n    this.$handleContainer = $neo.filter(`[data-neo-b=\"${this._id}.container.handle\"]`)\n    this.$tabContainer = this.$contentContainer.children('[data-layout-tab]')\n    this.$menuContainer = $neo.filter(`[data-neo-b=\"${this._id}.container.menu\"]`)\n    this.$previewContainer = $neo.filter(`[data-neo-b=\"${this._id}.container.preview\"]`)\n    this.$settingsButton = $neo.filter(`[data-neo-b=\"${this._id}.button.actions\"]`)\n    this.$togglerButton = $neo.filter(`[data-neo-b=\"${this._id}.button.toggler\"]`)\n    this.$enabledInput = $neo.filter(`[data-neo-b=\"${this._id}.input.enabled\"]`)\n    this.$levelInput = $neo.filter(`[data-neo-b=\"${this._id}.input.level\"]`)\n    this.$collapsedInput = $neo.filter(`[data-neo-b=\"${this._id}.input.collapsed\"]`)\n    this.$status = $neo.filter(`[data-neo-b=\"${this._id}.status\"]`)\n    this.$sortOrder = $neo.filter(`[data-neo-b=\"${this._id}.sortOrder\"]`)\n    this.$form = this.$container.closest('form')\n    this.resetButtons(settings.buttons)\n\n    let hasErrors = false\n    if (this._blockType) {\n      for (const tabName of this._blockType.getTabNames()) {\n        const selector = `[data-neo-b-info=\"${tabName}\"]`\n\n        if (this.$tabContainer.filter(selector).find('ul.errors').length > 0) {\n          hasErrors = true\n          this.$tabButton.filter(selector).addClass('error')\n        }\n      }\n    }\n\n    this.setLevel(settings.level)\n    this.toggleExpansion(hasErrors ? true : !settings.collapsed, false, false)\n    this.toggleShowButtons(this._showButtons)\n\n    this.addListener(this.$topbarContainer, 'dblclick', '@doubleClickTitle')\n    this.$container.data('block', this)\n  },\n\n  initUi (callInitUiElements = true) {\n    if (this._initialised) {\n      // Nothing to do here\n      return\n    }\n\n    if (callInitUiElements) {\n      Craft.appendBodyHtml(this._bodyHtml)\n      Craft.appendHeadHtml(this._headHtml)\n      Craft.initUiElements(this.$contentContainer)\n    }\n\n    this.$form = this.$container.closest('form')\n    this.initTabs()\n\n    this._settingsMenu = this.$settingsButton.data('trigger') || new Garnish.DisclosureMenu(this.$settingsButton)\n    this._settingsMenu.on('show', () => {\n      // Make sure all other blocks in the field have their settings menus closed\n      this._field\n        .getBlocks()\n        .filter((block) => block.$container.hasClass('active'))\n        .forEach((block) => block.toggleSettingsMenu(false))\n      this.$container.addClass('active')\n    })\n    this._settingsMenu.on('hide', () => this.$container.removeClass('active'))\n\n    this.$menuContainer = this._settingsMenu.$container\n    this.addListener(this.$menuContainer.find('[data-action]'), 'click', this._handleActionClick)\n    this.addListener(this.$menuContainer.find('[data-action]'), 'keydown', this._handleActionKeydown)\n\n    this.toggleEnabled(this._initialEnabled)\n\n    this._initialised = true\n    this._buttons?.initUi()\n\n    Garnish.requestAnimationFrame(() => this.updateResponsiveness())\n\n    // For Matrix blocks inside a Neo block, this listener adds a class name to the block for Neo to style.\n    // Neo applies its own styles to Matrix blocks in an effort to improve the visibility of them, however\n    // when dragging a Matrix block these styles get lost (since a dragged Matrix block loses its context of\n    // being inside a Neo block). Adding this class name to blocks before they are dragged means that the\n    // dragged Matrix block can still have the Neo-specific styles.\n    this.$container.on('mousedown', '.matrixblock', function (e) {\n      $(this).addClass('neo-matrixblock')\n    })\n\n    // If this block has errors and is nested somewhere in a child blocks UI element, set errors on ancestors' tabs\n    if (this.$container.hasClass('has-errors')) {\n      this.$container.parents('.ni_child-blocks-ui-element').each((_, cbuiElement) => {\n        const $tabContent = $(cbuiElement).parent()\n        const parentBlock = $tabContent.closest('.ni_block').data('block')\n        const tabIndex = $tabContent.index()\n        parentBlock.$tabButton.filter('.tab').eq(tabIndex) // Desktop tab buttons\n          .add(parentBlock.$tabButton.filter(':not(.tab)').eq(tabIndex)) // Mobile tab buttons\n          .add(parentBlock.$container.find('> .ni_block_topbar .tabs_btn')) // Mobile tab dropdown button\n          .addClass('has-errors')\n          .append(`<span data-icon=\"alert\" aria-label=\"${Craft.t('neo', 'Error')}\"></span>`)\n      })\n    }\n\n    // Setting up field and block property watching\n    if (!this.isNew()) {\n      this._initialState = {\n        enabled: this._enabled,\n        level: this._level,\n        content: this._getPostData()\n      }\n\n      const detectChange = () => this._detectChange()\n      const observer = new window.MutationObserver(() => {\n        setTimeout(detectChange, 200)\n\n        // Ensure blocks that are supposed to be non-editable by the user remain so\n        if (!this.getBlockType().isEditableByUser() && !this.$container.hasClass('is-disabled-for-user')) {\n          this.$container.addClass('is-disabled-for-user')\n        }\n      })\n\n      observer.observe(this.$container[0], {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      })\n\n      this.$contentContainer.on('propertychange change click', 'input, textarea, select, div.redactor-in', detectChange)\n      this.$contentContainer.on('paste input keyup', 'input:not([type=\"hidden\"]), textarea, div.redactor-in', detectChange)\n\n      this._detectChangeObserver = observer\n\n      // Hide the copy/paste/clone options if the block type is disabled\n      this.$menuContainer\n        .find('[data-action=\"copy\"], [data-action=\"paste\"], [data-action=\"duplicate\"]')\n        .parent()\n        .toggleClass('hidden', !this._blockType.getEnabled())\n    }\n\n    addFieldLinks(this.$contentContainer)\n\n    this.trigger('initUi')\n  },\n\n  /**\n   * @public\n   * @since 3.7.0\n   */\n  initTabs () {\n    const $neo = this.$container.find('[data-neo-b]')\n    this.$tabsButton = $neo.filter(`[data-neo-b=\"${this._id}.button.tabs\"]`)\n    this.$tabsContainer = $neo.filter(`[data-neo-b=\"${this._id}.container.tabs\"]`)\n    this.$tabButton = $neo.filter(`[data-neo-b=\"${this._id}.button.tab\"]`)\n    this.$tabContainer = this.$contentContainer.children('[data-layout-tab]')\n\n    this._tabsMenu = this.$tabsButton.data('trigger') || new Garnish.DisclosureMenu(this.$tabsButton)\n    this._tabsMenu.on('show', () => this.$container.addClass('active'))\n    this._tabsMenu.on('hide', () => this.$container.removeClass('active'))\n\n    this.$tabButton = this.$tabButton.add(this._tabsMenu.$container.find(`[data-neo-b=\"${this._id}.button.tab\"]`))\n    this.addListener(this.$tabButton, 'click', this['@setTab'])\n    this.addListener(this.$tabButton, 'keydown', this._handleTabKeydown)\n  },\n\n  /**\n   * @since 3.9.0\n   */\n  getHtml () {\n    return this._blockHtml.replace(/__NEOBLOCK__/g, this._id)\n  },\n\n  /**\n   * @since 3.9.0\n   */\n  getJs () {\n    return this._bodyHtml.replace(/__NEOBLOCK__/g, this._id)\n  },\n\n  destroy () {\n    if (this._initialised) {\n      this.$foot?.remove()\n\n      clearInterval(this._detectChangeInterval)\n\n      if (this._detectChangeObserver) {\n        this._detectChangeObserver.disconnect()\n      }\n\n      this.trigger('destroy')\n    }\n  },\n\n  getBlockType () {\n    return this._blockType\n  },\n\n  getId () {\n    return this._id\n  },\n\n  /**\n   * @public\n   * @returns the block UUID\n   * @since 4.2.0\n   */\n  getUuid () {\n    return this._uuid\n  },\n\n  /**\n   * @public\n   * @returns the ID of the duplicate block, or the ID of this block if it hasn't been duplicated\n   * @since 3.7.0\n   */\n  getDuplicatedBlockId () {\n    return this.$form.data('elementEditor')?.draftElementIds[this._id] ?? this._id\n  },\n\n  isTopLevel () {\n    return this._level === 1\n  },\n\n  getLevel () {\n    return this._level\n  },\n\n  setLevel (level) {\n    this._level = level | 0\n\n    this.$levelInput.val(`0${this._level}`)\n    this.$container.toggleClass('is-level-odd', !!(this._level % 2))\n    this.$container.toggleClass('is-level-even', !(this._level % 2))\n  },\n\n  setModified (isModified) {\n    this._modified = isModified\n  },\n\n  getButtons () {\n    return this._buttons\n  },\n\n  getSiteId () {\n    if (!this._siteId) {\n      const $siteId = this.$form.find('input[name=\"siteId\"]')\n      this._siteId = $siteId.val()\n    }\n\n    return this._siteId\n  },\n\n  getContent () {\n    const rawContent = this._getPostData()\n    const content = {}\n\n    const setValue = (keys, value) => {\n      let currentSet = content\n\n      for (let i = 0; i < keys.length - 1; i++) {\n        const key = keys[i]\n\n        if (!$.isPlainObject(currentSet[key]) && !Array.isArray(currentSet[key])) {\n          currentSet[key] = {}\n        }\n\n        currentSet = currentSet[key]\n      }\n\n      const key = keys[keys.length - 1]\n      currentSet[key] = value\n    }\n\n    for (const rawName of Object.keys(rawContent)) {\n      const fullName = NS.parse(rawName)\n      const name = fullName.slice(this._templateNs.length + 1) // Adding 1 because content is NS'd under [fields]\n\n      // Make sure empty arrays (which can happen with level, enabled, etc. when using the child blocks UI element) are ignored\n      if (!name.length) {\n        continue\n      }\n\n      const value = rawContent[rawName]\n\n      setValue(name, value)\n    }\n\n    return content\n  },\n\n  getParent (blocks = null) {\n    blocks ??= this._field.getBlocks()\n    const level = this.getLevel()\n    let index = blocks.indexOf(this)\n    let blockParent = null\n\n    if (index >= 0 && level > 1) {\n      while (blockParent === null && index > 0) {\n        const currentBlock = blocks[--index]\n        const currentLevel = currentBlock.getLevel()\n\n        if (currentLevel === level - 1) {\n          blockParent = currentBlock\n        }\n      }\n    }\n\n    return blockParent\n  },\n\n  getChildren (blocks = null, descendants = null) {\n    blocks ??= this._field.getBlocks()\n    const level = this.getLevel()\n    let index = blocks.indexOf(this)\n    const childBlocks = []\n\n    if (index >= 0) {\n      let currentBlock = blocks[++index]\n\n      while (currentBlock && currentBlock.getLevel() > level) {\n        const currentLevel = currentBlock.getLevel()\n\n        if (descendants ? currentLevel > level : currentLevel === level + 1) {\n          childBlocks.push(currentBlock)\n        }\n\n        currentBlock = blocks[++index]\n      }\n    }\n\n    return childBlocks\n  },\n\n  getSiblings (blocks = null) {\n    blocks ??= this._field.getBlocks()\n\n    return this.isTopLevel() ? blocks.filter(b => b.isTopLevel()) : this.getParent(blocks).getChildren(blocks)\n  },\n\n  getField () {\n    return this._field\n  },\n\n  updatePreview (condensed = null) {\n    condensed = typeof condensed === 'boolean' ? condensed : false\n\n    const $childFields = this.$childrenContainer.find('.field')\n    const $fields = this.$contentContainer.find('.field').add($childFields)\n    const previewText = []\n\n    $fields.each(function () {\n      const $field = $(this)\n      const $input = $field.children('.input')\n      const fieldType = $field.data('type')\n      const label = $field.children('.heading').children('label').text()\n\n      // We rely on knowing the field type to know how to generate its preview, so if we don't know, skip it.\n      if (fieldType === null) {\n        return\n      }\n\n      let value = false\n\n      switch (fieldType) {\n        case 'craft\\\\fields\\\\Assets':\n          {\n            const values = []\n            const $assets = $input.find('.element')\n\n            $assets.each(function () {\n              const $asset = $(this)\n              const $thumbContainer = $asset.find('.thumb')\n              const $thumb = $thumbContainer.children('img')\n              let srcset = $thumb.prop('srcset')\n\n              if (!srcset) {\n                srcset = $thumbContainer.data('srcset')\n              }\n\n              values.push(`<img sizes=\"30px\" srcset=\"${srcset}\">`)\n\n              if (!condensed && $assets.length === 1) {\n                const title = $asset.find('.title').text()\n\n                values.push(_escapeHTML(_limit(title)))\n              }\n            })\n\n            value = values.join(' ')\n          }\n          break\n        case 'craft\\\\fields\\\\Categories':\n        case 'craft\\\\fields\\\\Entries':\n        case 'craft\\\\fields\\\\Tags':\n        case 'craft\\\\fields\\\\Users':\n          {\n            const values = []\n\n            $input.find('.element').each(function () {\n              const title = $(this).find('.title, .label').eq(0).text()\n              values.push(_escapeHTML(_limit(title)))\n            })\n\n            value = values.join(', ')\n          }\n          break\n        case 'craft\\\\fields\\\\Checkboxes':\n          {\n            const values = []\n\n            $input.find('input[type=\"checkbox\"]').each(function () {\n              if (this.checked) {\n                const id = $(this).prop('id')\n                const label = $input.find(`label[for=\"${id}\"]`).text()\n                values.push(_escapeHTML(_limit(label)))\n              }\n            })\n\n            value = values.join(', ')\n          }\n          break\n        case 'craft\\\\fields\\\\Color':\n          {\n            const color = $input.find('input[type=\"color\"]').val()\n            const colorText = $input.find('input[type=\"text\"]').val()\n            const colorRev = $input.find('div.colorhex').text()\n            let background = null\n\n            if (color && colorText) {\n              // Set the selected color.  `colorText` must also be checked, even though it's not used, because\n              // the color type field may still store a color value even if the text field has been cleared.\n              background = `background-color: ${color}`\n            } else if (!color && colorText) {\n              // When a block is initially collapsed, the color type field will not have been set, so the text\n              // field value will need to be used.\n              background = `background-color: ${colorText}`\n            } else if (colorRev) {\n              // Entry revisions will hav a div rather than an input, so use that.\n              background = `background-color: ${colorRev}`\n            } else {\n              // No color value has been set for the field.\n              background = 'background-image: repeating-linear-gradient(-45deg, transparent, transparent 2px, #777 2px, #777 3px)'\n            }\n\n            value = `<div class=\"preview_color\" style=\"${background}\"></div>`\n          }\n          break\n        case 'craft\\\\fields\\\\Date':\n          {\n            const date = _escapeHTML($input.find('.datewrapper input').val())\n            const time = _escapeHTML($input.find('.timewrapper input').val())\n\n            value = date && time ? (date + ' ' + time) : (date || time)\n          }\n          break\n        case 'craft\\\\fields\\\\Dropdown':\n          {\n            const $selected = $input.find('select').children(':selected')\n\n            value = _escapeHTML(_limit($selected.text()))\n          }\n          break\n        case 'craft\\\\fields\\\\Email':\n          value = _escapeHTML(_limit($input.children('input[type=\"email\"]').val()))\n          break\n        case 'craft\\\\fields\\\\Lightswitch':\n          {\n            const enabled = !!$input.find('input').val()\n\n            value = `<span class=\"status${enabled ? ' live' : ''}\"></span>` + _escapeHTML(_limit(label))\n          }\n          break\n        case 'craft\\\\fields\\\\MultiSelect':\n        case 'ttempleton\\\\categorygroupsfield\\\\fields\\\\CategoryGroupsField':\n          {\n            const values = []\n            const $selected = $input.find('select').children(':selected')\n\n            $selected.each(function () {\n              values.push($(this).text())\n            })\n\n            value = _escapeHTML(_limit(values.join(', ')))\n          }\n          break\n        case 'craft\\\\fields\\\\Number':\n        case 'craft\\\\fields\\\\PlainText':\n          value = _escapeHTML(_limit($input.children('input[type=\"text\"], textarea').val()))\n          break\n        case 'craft\\\\fields\\\\RadioButtons':\n          {\n            const $checked = $input.find('input[type=\"radio\"]:checked')\n            const label = $checked.closest('label').text()\n\n            value = _escapeHTML(_limit(label))\n          }\n          break\n        case 'craft\\\\redactor\\\\Field':\n        case 'spicyweb\\\\tinymce\\\\fields\\\\TinyMCE':\n          value = _escapeHTML(_limit(Craft.getText($input.find('textarea').val())))\n          break\n        case 'craft\\\\ckeditor\\\\Field':\n          value = _escapeHTML(_limit(Craft.getText($input.find('[role=\"textbox\"]').html())))\n          break\n        case 'craft\\\\fields\\\\Url':\n          value = _escapeHTML(_limit($input.children('input[type=\"url\"]').val()))\n          break\n        case 'craft\\\\fields\\\\Matrix':\n        case 'verbb\\\\supertable\\\\fields\\\\SuperTableField':\n          {\n            const $subFields = $field.find('.field')\n            const $subInputs = $subFields.find('input[type!=\"hidden\"], select, textarea, .label')\n\n            const values = []\n\n            $subInputs.each(function () {\n              const $subInput = $(this)\n              let subValue = null\n\n              if ($subInput.is('input, textarea')) {\n                subValue = Craft.getText(Garnish.getInputPostVal($subInput))\n              } else if ($subInput.is('select')) {\n                subValue = $subInput.find('option:selected').text()\n              } else if ($subInput.hasClass('label')) {\n                // TODO check for lightswitch maybe?\n                subValue = $subInput.text()\n              }\n\n              if (subValue) {\n                values.push(_limit(subValue))\n              }\n            })\n\n            value = _escapeHTML(values.join(', '))\n          }\n          break\n        case 'typedlinkfield\\\\fields\\\\LinkField':\n        case 'presseddigital\\\\linkit\\\\fields\\\\LinkitField':\n          {\n            const values = []\n            const $selectedType = $input.find('select').children(':selected').first()\n            const $visibleOption = $input.find('.linkfield--typeOption:not(.hidden), [class^=\"linkit--\"]:not(.hidden)')\n            const visibleInputVal = $visibleOption.find('input[type!=\"hidden\"]').val()\n            const $visibleElement = $visibleOption.find('.element')\n            const customText = $input.find('.field[id*=\"customText\"] input, .linkit--customText input').val()\n\n            values.push(_limit($selectedType.text()))\n\n            if (visibleInputVal) {\n              values.push(_limit(visibleInputVal))\n            }\n\n            if ($visibleElement.length > 0) {\n              const title = $visibleElement.find('.title, .label').eq(0).text()\n\n              values.push(_limit(title))\n            }\n\n            if (customText) {\n              values.push(_limit(customText))\n            }\n\n            value = _escapeHTML(values.join(', '))\n          }\n          break\n        case 'luwes\\\\codemirror\\\\fields\\\\CodeMirrorField':\n        {\n          const lines = []\n\n          $field.find('.CodeMirror-line > span').each(function () {\n            lines.push($(this).text())\n          })\n\n          value = _escapeHTML(lines.join(' '))\n          break\n        }\n        case 'rias\\\\positionfieldtype\\\\fields\\\\Position':\n        {\n          const $selected = $input.find('.btn.active')\n\n          value = _escapeHTML($selected.prop('title'))\n          break\n        }\n        case 'wrav\\\\oembed\\\\fields\\\\OembedField':\n          value = _escapeHTML(_limit($input.children('input').val()))\n      }\n\n      if (value && previewText.length < 10) {\n        previewText.push('<span class=\"preview_section\">', value, '</span>')\n      }\n    })\n\n    this.$previewContainer.html(previewText.join(''))\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  isSelected () {\n    return this.$container.hasClass('is-selected')\n  },\n\n  collapse (save, animate) {\n    this.toggleExpansion(false, save, animate)\n  },\n\n  expand (save, animate) {\n    this.toggleExpansion(true, save, animate)\n  },\n\n  toggleExpansion (expand, save, animate) {\n    expand = typeof expand === 'boolean' ? expand : !this._expanded\n    save = typeof save === 'boolean' ? save : true\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (expand !== this._expanded) {\n      this._expanded = expand\n\n      if (!this._expanded) {\n        this.updatePreview()\n      }\n\n      const expandContainer = this.$menuContainer.find('[data-action=\"expand\"]').parent()\n      const collapseContainer = this.$menuContainer.find('[data-action=\"collapse\"]').parent()\n\n      this.$collapsedInput.val(!this._expanded ? '1' : '')\n      this.$container\n        .toggleClass('is-expanded', this._expanded)\n        .toggleClass('is-collapsed', !this._expanded)\n\n      expandContainer.toggleClass('hidden', this._expanded)\n      collapseContainer.toggleClass('hidden', !this._expanded)\n      this.$previewContainer.toggleClass('hidden', this._expanded)\n\n      const contentHeight = this.$contentContainer.outerHeight() | 0\n      const childrenHeight = this.$childrenContainer.outerHeight() | 0\n\n      const expandedCss = {\n        opacity: 1,\n        height: contentHeight + childrenHeight\n      }\n      const collapsedCss = {\n        opacity: 0,\n        height: 0\n      }\n      const clearCss = {\n        opacity: '',\n        height: ''\n      }\n\n      if (animate) {\n        this.$bodyContainer\n          .css(this._expanded ? collapsedCss : expandedCss)\n          .velocity(this._expanded ? expandedCss : collapsedCss, 'fast', e => {\n            if (this._expanded) {\n              this.$bodyContainer.css(clearCss)\n            }\n          })\n      } else {\n        this.$bodyContainer.css(this._expanded ? clearCss : collapsedCss)\n      }\n\n      if (save) {\n        this.saveExpansion()\n      }\n\n      this.trigger('toggleExpansion', {\n        expanded: this._expanded\n      })\n    }\n  },\n\n  isExpanded () {\n    return this._expanded\n  },\n\n  saveExpansion () {\n    if (!this.isNew()) {\n      // Use the duplicated block ID if we're on a new provisional draft\n      // The server-side code will also apply the new state to the canonical block\n      const sentBlockId = this.$form.data('elementEditor')?.settings.isProvisionalDraft\n        ? this.getDuplicatedBlockId()\n        : this.getId()\n      const data = {\n        expanded: this.isExpanded() ? 1 : 0,\n        blockId: sentBlockId,\n        siteId: this.getSiteId()\n      }\n\n      Craft.queue.push(() => new Promise((resolve, reject) => {\n        Craft.sendActionRequest('POST', 'neo/input/save-expansion', { data }).then(resolve).catch(reject)\n      }))\n    }\n  },\n\n  disable () {\n    this.toggleEnabled(false)\n  },\n\n  enable () {\n    this.toggleEnabled(true)\n  },\n\n  toggleEnabled (enable = !this._enabled) {\n    const triggerEvent = this._enabled !== enable\n    this._enabled = enable\n\n    const blockTypeEnabled = this._blockType.getEnabled()\n    const actuallyEnabled = this._enabled && blockTypeEnabled\n    const enableContainer = this.$menuContainer.find('[data-action=\"enable\"]').parent()\n    const disableContainer = this.$menuContainer.find('[data-action=\"disable\"]').parent()\n\n    this.$container\n      .toggleClass('is-enabled', actuallyEnabled)\n      .toggleClass('is-disabled', !actuallyEnabled)\n\n    this.$status.toggleClass('hidden', actuallyEnabled)\n\n    enableContainer.toggleClass('hidden', this._enabled || !blockTypeEnabled)\n    disableContainer.toggleClass('hidden', !this._enabled || !blockTypeEnabled)\n\n    this.$enabledInput.val(this._enabled ? '1' : '')\n\n    if (triggerEvent) {\n      this.trigger('toggleEnabled', {\n        enabled: this._enabled\n      })\n    }\n  },\n\n  isEnabled () {\n    return this._enabled\n  },\n\n  toggleShowButtons (show = !this._showButtons) {\n    this.$buttonsContainer.toggleClass('hidden', !show)\n    this.$childrenWarningsContainer.toggleClass('hidden', show)\n  },\n\n  selectTab (tabName) {\n    this.$tabButton.removeClass('is-selected')\n    this.$tabContainer.addClass('hidden')\n    const $tabButton = this.$tabButton.filter(`[data-neo-b-info=\"${tabName}\"]`).addClass('is-selected')\n    const tabUid = $tabButton.attr('data-neo-b-tabuid')\n    const $tabContainer = this.$tabContainer\n      .filter(`[data-layout-tab=\"${tabUid}\"]`)\n      .removeClass('hidden')\n    this.$tabsButton.text(tabName)\n    Craft.ElementThumbLoader.retryAll()\n\n    this.trigger('selectTab', { tabName, $tabButton, $tabContainer })\n  },\n\n  updateResponsiveness () {\n    const isMobileBrowser = Garnish.isMobileBrowser()\n    this._topbarLeftWidth ??= this.$topbarLeftContainer.width() -\n      (this._expanded ? 0 : this.$previewContainer.width()) -\n      (isMobileBrowser ? this.$handleContainer.width() : 0)\n    this._topbarRightWidth ??= this.$topbarRightContainer.width()\n    const hasRoomForIndividualTabs = this.$topbarContainer.width() < this._topbarLeftWidth + this._topbarRightWidth\n\n    this.$handleContainer.toggleClass('hidden', isMobileBrowser)\n    this.$tabsContainer.toggleClass('invisible', hasRoomForIndividualTabs)\n    this.$tabsButton.toggleClass('invisible', !hasRoomForIndividualTabs)\n  },\n\n  updateActionsMenu () {\n    const blocks = this._field.getBlocks()\n    const parentBlockType = this.getParent()?.getBlockType()\n    let allowedBlockTypes = parentBlockType?.getChildBlocks() ?? this._field.getBlockTypes(true)\n\n    if (allowedBlockTypes === true || allowedBlockTypes === '*') {\n      allowedBlockTypes = this._field.getBlockTypes(false)\n    } else if (Array.isArray(allowedBlockTypes)) {\n      allowedBlockTypes = allowedBlockTypes\n        .map(bt => typeof bt === 'string' ? this._field.getBlockTypeByHandle(bt) : bt)\n        // In case any otherwise valid block types are being filtered out by the event or conditions\n        .filter(bt => typeof bt !== 'undefined')\n    }\n\n    // Finally, only allow block types that are allowed to be created by the current user\n    // This is safe since allowedBlockTypes is only used to check if paste/add block actions should be disabled\n    allowedBlockTypes = allowedBlockTypes.filter((bt) => bt.isCreatableByUser())\n\n    const field = this._field.getName()\n    const maxBlocks = this._field.getMaxBlocks()\n    const additionalCheck = true\n    const maxTopBlocks = this._level === 1 ? this._field.getMaxTopBlocks() : 0\n    const noAllowedBlockTypes = !allowedBlockTypes || allowedBlockTypes.length === 0\n\n    const blockType = this.getBlockType()\n    const blocksOfType = blocks.filter(b => b.getBlockType().getHandle() === blockType.getHandle())\n    const maxBlockTypes = blockType.getMaxBlocks()\n    const siblingBlocks = this.getSiblings(blocks)\n\n    const totalTopBlocks = blocks.filter(block => block.isTopLevel()).length\n\n    const maxBlocksMet = maxBlocks > 0 && blocks.length >= maxBlocks\n    const maxTopBlocksMet = maxTopBlocks > 0 && totalTopBlocks >= maxTopBlocks\n\n    const allDisabled = maxBlocksMet || maxTopBlocksMet || !additionalCheck\n    const addDisabled = allDisabled || noAllowedBlockTypes\n    const typeDisabled = maxBlockTypes > 0 && blocksOfType.length >= maxBlockTypes\n    let cloneDisabled = allDisabled || typeDisabled\n\n    const pasteData = JSON.parse(window.localStorage.getItem(`neo:copy:${field}`) || '{}')\n    let pasteDisabled = allDisabled || !pasteData.blocks || !pasteData.field || pasteData.field !== field\n\n    // Test to see if pasting/cloning would exceed the parent's max child blocks\n    const parentBlock = this.getParent(blocks)\n    if ((!pasteDisabled || !cloneDisabled) && parentBlock) {\n      const maxChildBlocks = parentBlock.getBlockType().getMaxChildBlocks()\n\n      if (maxChildBlocks > 0) {\n        const childBlockCount = parentBlock.getChildren(blocks).length\n        const pasteBlockCount = pasteData.blocks?.length ?? 0\n        pasteDisabled ||= childBlockCount + pasteBlockCount > maxChildBlocks\n        cloneDisabled ||= childBlockCount >= maxChildBlocks\n      }\n    }\n\n    // Test to see if pasting would exceed this block's max sibling blocks\n    if (!(pasteDisabled && cloneDisabled)) {\n      const maxSiblingBlocks = this.getBlockType().getMaxSiblingBlocks()\n\n      if (maxSiblingBlocks > 0) {\n        const hasSameBlockType = block => {\n          if (Object.prototype.hasOwnProperty.call(block, 'type')) {\n            return block.type === this.getBlockType().getId()\n          } else if (typeof block.getBlockType === 'function') {\n            return block.getBlockType().getHandle() === this.getBlockType().getHandle()\n          }\n\n          return false\n        }\n\n        const siblingBlockCount = siblingBlocks.filter(hasSameBlockType, this).length\n        const pasteSiblingBlockCount = pasteData.blocks ? pasteData.blocks.filter(hasSameBlockType, this).length : 0\n        pasteDisabled ||= siblingBlockCount + pasteSiblingBlockCount > maxSiblingBlocks\n        cloneDisabled ||= siblingBlockCount >= maxSiblingBlocks\n      }\n    }\n\n    if (!pasteDisabled) {\n      const currentBlockTypesById = blocks.reduce((m, b) => {\n        const bt = b.getBlockType()\n        const id = bt.getId()\n        const v = m[id] || { blockType: bt, count: 0 }\n\n        v.count++\n        m[id] = v\n\n        return m\n      })\n\n      for (const pasteBlock of pasteData.blocks) {\n        const pasteBlockTypeObj = currentBlockTypesById[pasteBlock.type]\n\n        // Test to see if any max block types properties will be violated\n        if (pasteBlockTypeObj) {\n          const pasteBlockType = pasteBlockTypeObj.blockType\n          const currentBlocksOfTypeCount = pasteBlockTypeObj.count\n          const maxPasteBlockTypes = pasteBlockType.getMaxBlocks()\n          const pasteTypeDisabled = maxPasteBlockTypes > 0 && currentBlocksOfTypeCount >= maxPasteBlockTypes\n\n          pasteDisabled ||= pasteTypeDisabled\n        }\n\n        // Test to see if the top level paste blocks have a block type that is allowed to be pasted here\n        if (pasteBlock.level === 1) {\n          pasteDisabled ||= !allowedBlockTypes.find(bt => bt.getId() === pasteBlock.type)\n        }\n      }\n    }\n\n    const siblingIndex = siblingBlocks.indexOf(this)\n    const disableMoveUp = siblingIndex <= 0\n    const disableMoveDown = [-1, siblingBlocks.length - 1].includes(siblingIndex)\n\n    this.$menuContainer.find('[data-action=\"moveUp\"]').parent().toggleClass('hidden', disableMoveUp)\n    this.$menuContainer.find('[data-action=\"moveDown\"]').parent().toggleClass('hidden', disableMoveDown)\n    this.$menuContainer.find('[data-action=\"duplicate\"]').toggleClass('disabled', cloneDisabled)\n\n    // Paste/add actions should be hidden if there is no chance of them being enabled later\n    if (noAllowedBlockTypes) {\n      this.$menuContainer.find('[data-action=\"add\"]').parent().toggleClass('hidden', addDisabled)\n      this.$menuContainer.find('[data-action=\"paste\"]').parent().toggleClass('hidden', pasteDisabled)\n    } else {\n      this.$menuContainer.find('[data-action=\"add\"]').toggleClass('disabled', addDisabled)\n      this.$menuContainer.find('[data-action=\"paste\"]').toggleClass('disabled', pasteDisabled)\n    }\n\n    // If there are no visible items in the second list, hide the separator as well\n    this.$menuContainer.children('hr').toggleClass(\n      'hidden',\n      this.$menuContainer.children('ul:last-child').children('li:not(.hidden)').length === 0\n    )\n  },\n\n  resetButtons (settings) {\n    this.$blocksContainer = this.$container.find(`[data-neo-b=\"${this._id}.container.blocks\"]`)\n    this.$buttonsContainer = this.$container.find(`[data-neo-b=\"${this._id}.container.buttons\"]`)\n    this.$childrenContainer = this.$container.find(`[data-neo-b=\"${this._id}.container.children\"]`)\n    this.$childrenWarningsContainer = this.$container.find(`[data-neo-b=\"${this._id}.container.childrenWarnings\"]`)\n    this.$collapsedChildrenContainer = this.$container.find(`[data-neo-b=\"${this._id}.container.collapsedChildren\"]`)\n\n    if (typeof settings !== 'undefined' && settings !== null) {\n      this._buttons = settings\n    } else {\n      this._buttons = new this._field.ButtonClass({\n        $ownerContainer: this.$container,\n        field: this._field,\n        items: this._blockType.getChildBlockItems(this._field.getItems()),\n        maxBlocks: this._field.getMaxBlocks()\n      })\n    }\n\n    if (this._buttons) {\n      this._buttons.on('newBlock', e => this.trigger('newBlock', Object.assign(e, { level: this.getLevel() + 1 })))\n      this.$buttonsContainer.append(this._buttons.$container)\n\n      if (this._buttons.$ownerContainer === null) {\n        this._buttons.$ownerContainer = this.$container\n      }\n\n      if (this._initialised) {\n        this._buttons.initUi()\n      }\n    }\n  },\n\n  namespaceId (id) {\n    NS.enter(this._templateNs)\n    const namespacedId = `${NS.toString('-')}-${Craft.formatInputId(id)}`\n    NS.leave()\n    return namespacedId\n  },\n\n  toggleSettingsMenu (toggle) {\n    toggle ??= !this._settingsMenu.isExpanded()\n    if (toggle) {\n      this._settingsMenu.show()\n    } else {\n      this._settingsMenu.hide()\n    }\n  },\n\n  _handleActionClick (e) {\n    e.preventDefault()\n    this['@settingSelect'](e)\n  },\n\n  _handleActionKeydown (e) {\n    if (e.keyCode === Garnish.SPACE_KEY) {\n      e.preventDefault()\n      this['@settingSelect'](e)\n    }\n  },\n\n  _handleTabKeydown (e) {\n    if (e.keyCode === Garnish.SPACE_KEY) {\n      this['@setTab'](e)\n    }\n  },\n\n  _detectChange () {\n    // When editing a draft and autosave is enabled, we need to force modified to be set, or\n    // returning the block to its original values will cause it not to be resaved.\n    const elementEditor = this.$form.data('elementEditor')\n\n    if (elementEditor?.enableAutosave && elementEditor.settings.draftId) {\n      this.setModified(true)\n      this._forceModified = true\n    }\n\n    if (!this._forceModified) {\n      const initial = this._initialState\n      const content = this._getPostData()\n\n      const modified = !Craft.compare(content, initial.content, false) ||\n        initial.enabled !== this._enabled ||\n        initial.level !== this._level\n\n      if (modified !== this._modified) {\n        this.setModified(modified)\n      }\n    }\n\n    this.trigger('change')\n  },\n\n  _getPostData () {\n    const content = Garnish.getPostData(this.$contentContainer)\n    // Remove keys associated with child block subfields (occurs when using child blocks UI element)\n    const badKeys = Object.keys(content)\n      .filter((key) => !key.startsWith(`fields[${this._field.getName()}][blocks][uid:${this._uuid}]`))\n\n    for (const key of badKeys) {\n      delete content[key]\n    }\n\n    return content\n  },\n\n  '@settingSelect' (e) {\n    this._settingsMenu.hide()\n    const option = e.target.closest('[data-action]')\n\n    if (!option.classList.contains('disabled')) {\n      switch (option.dataset.action) {\n        case 'collapse':\n          this.collapse()\n          break\n        case 'expand':\n          this.expand()\n          break\n        case 'disable':\n          this.disable()\n          this.collapse()\n          break\n        case 'enable':\n          this.enable()\n          this.expand()\n          break\n        case 'moveUp':\n          this.trigger('moveUpBlock', { block: this })\n          break\n        case 'moveDown':\n          this.trigger('moveDownBlock', { block: this })\n          break\n        case 'delete':\n          this.trigger('removeBlock', { block: this })\n          break\n        case 'add':\n          this.trigger('addBlockAbove', { block: this })\n          break\n        case 'copy':\n          this.trigger('copyBlock', { block: this })\n          break\n        case 'paste':\n          this.trigger('pasteBlock', { block: this })\n          break\n        case 'duplicate':\n          this.trigger('duplicateBlock', { block: this })\n          break\n      }\n    }\n  },\n\n  '@doubleClickTitle' (e) {\n    e.preventDefault()\n\n    const $target = $(e.target)\n    const $checkFrom = $target.parent()\n    const isLeft = $checkFrom.closest(this.$topbarLeftContainer).length > 0\n    const isRight = $checkFrom.closest(this.$topbarRightContainer).length > 0\n\n    if (!isLeft && !isRight) {\n      this.$form.data('elementEditor')?.pause()\n      this.toggleExpansion()\n      this.$form.data('elementEditor')?.resume()\n    }\n  },\n\n  '@setTab' (e) {\n    e.preventDefault()\n    this._tabsMenu.hide()\n\n    const $tab = $(e.currentTarget)\n    const tabName = $tab.attr('data-neo-b-info')\n\n    this.selectTab(tabName)\n  }\n})\n","import Craft from 'craft'\n\nexport function addFieldLinks ($element) {\n  if (Craft.CpFieldInspectPlugin) {\n    Craft.CpFieldInspectPlugin.addFieldLinks()\n  }\n}\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\n\nconst _defaults = {\n  $ownerContainer: null,\n  blockTypes: [],\n  groups: [],\n  items: null,\n  maxBlocks: 0,\n  maxTopBlocks: 0,\n  blocks: null\n}\n\nclass NewBlockMenu {\n  static BUTTON_INFO = 'data-neo-bn-info'\n  _blockTypes = []\n  _blockTypeGroups = []\n\n  constructor (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    if (settings.items) {\n      this._items = Array.from(settings.items)\n      this._blockTypes = this._items.filter(i => i.getType() === 'blockType')\n      this._blockTypeGroups = this._items.filter(i => i.getType() === 'group')\n    } else {\n      this._blockTypes = Array.from(settings.blockTypes)\n      this._blockTypeGroups = Array.from(settings.groups)\n      this._items = [...this._blockTypes, ...this._blockTypeGroups].sort((a, b) => a.getSortOrder() - b.getSortOrder())\n    }\n\n    this.$ownerContainer = settings.$ownerContainer\n    this._field = settings.field\n    this._maxBlocks = settings.maxBlocks | 0\n    this._maxTopBlocks = settings.maxTopBlocks | 0\n\n    this.$container = this.renderButtons()\n\n    const $neo = this.$container.find('[data-neo-bn]')\n    this.$buttonsContainer = $neo.filter('[data-neo-bn=\"container.buttons\"]')\n    this.$menuContainer = $neo.filter('[data-neo-bn=\"container.menu\"]')\n    this.$blockButtons = $neo.filter('[data-neo-bn=\"button.addBlock\"]')\n    this.$groupButtons = $neo.filter('[data-neo-bn=\"button.group\"]')\n\n    if (settings.blocks) {\n      this.updateState(settings.blocks)\n    }\n  }\n\n  /**\n   * @since 3.6.0\n   * @protected\n   * @returns string\n   */\n  renderButtons () {\n    const ownerBlockType = this.$ownerContainer?.hasClass('ni_block')\n      ? this.$ownerContainer.attr('class').match(/ni_block--([^\\s]+)/)[1]\n      : null\n    const ungroupChildBlockTypes = ownerBlockType !== null &&\n      !this.getField().getBlockTypeByHandle(ownerBlockType).getGroupChildBlockTypes()\n    const buttonsHtml = []\n    let blockTypesHtml = []\n    let currentGroup = null\n    let firstButton = true\n\n    const generateGroupDropdown = () => {\n      buttonsHtml.push(`\n          <div class=\"btn dashed${firstButton ? ' add icon' : ''} menubtn\" data-neo-bn=\"button.group\">\n            ${currentGroup.getName()}\n          </div>\n          <div class=\"menu\">\n            <ul>${blockTypesHtml.join('')}\n            </ul>\n          </div>`)\n      firstButton = false\n      blockTypesHtml = []\n    }\n\n    buttonsHtml.push(`\n      <div class=\"ni_buttons\">\n        <div class=\"btngroup\" data-neo-bn=\"container.buttons\">`)\n\n    for (let i = 0; i < this._items.length; i++) {\n      const item = this._items[i]\n      const type = item.getType()\n\n      if (type === 'blockType') {\n        // Ignore disabled block types, or block types for which the current user isn't allowed to create blocks\n        if (!item.getEnabled() || !item.isCreatableByUser()) {\n          continue\n        }\n\n        const titleAttr = item.getDescription() ? ` title=\"${item.getDescription()}\"` : ''\n\n        if (currentGroup !== null) {\n          blockTypesHtml.push(`\n            <li>\n              <a${titleAttr} aria-label=\"${item.getName()}\" data-neo-bn=\"button.addBlock\" ${NewBlockMenu.BUTTON_INFO}=\"${item.getHandle()}\">${item.getName()}</a>\n            </li>`)\n        } else {\n          buttonsHtml.push(`\n          <button${titleAttr} aria-label=\"${item.getName()}\" class=\"btn dashed${firstButton ? ' add icon' : ''}\" data-neo-bn=\"button.addBlock\" ${NewBlockMenu.BUTTON_INFO}=\"${item.getHandle()}\">\n            ${item.getName()}\n          </button>`)\n          firstButton = false\n        }\n      } else if (type === 'group') {\n        if (currentGroup !== null && blockTypesHtml.length > 0) {\n          generateGroupDropdown()\n        }\n\n        if (\n          // Don't show dropdowns for groups with blank names, as they're just used to end the previous group\n          (item.isBlank()) ||\n          // Don't show dropdowns if we're not forcing them to show, and there's only one block type in this group\n          (!item.getAlwaysShowDropdown() && ((i + 2) >= this._items.length || this._items[i + 2].getType() === 'group')) ||\n          // Don't show dropdowns if the block type is set not to group child block types\n          (ungroupChildBlockTypes)\n        ) {\n          currentGroup = null\n        } else {\n          currentGroup = item\n        }\n      }\n    }\n\n    if (currentGroup !== null && blockTypesHtml.length > 0) {\n      generateGroupDropdown()\n    }\n\n    buttonsHtml.push(`\n        </div>\n        <div class=\"btn dashed add icon menubtn hidden\" data-neo-bn=\"container.menu\">\n          ${Craft.t('neo', 'Add a block')}\n        </div>`)\n\n    // Menu, for views where the buttons would exceed the editor width\n    currentGroup = null\n    let lastGroupHadBlockTypes = false\n    buttonsHtml.push(`\n        <div class=\"menu\">\n          <ul>`)\n\n    for (const item of this._items) {\n      const type = item.getType()\n\n      if (type === 'blockType') {\n        // Ignore disabled block types, or block types for which the current user isn't allowed to create blocks\n        if (!item.getEnabled() || !item.isCreatableByUser()) {\n          continue\n        }\n\n        if (currentGroup !== null && !lastGroupHadBlockTypes) {\n          lastGroupHadBlockTypes = true\n\n          buttonsHtml.push(`\n              <h6>${currentGroup.getName()}</h6>\n              <ul class=\"padded\">`)\n        }\n\n        const titleAttr = item.getDescription() ? ` title=\"${item.getDescription()}\"` : ''\n        buttonsHtml.push(`\n            <li>\n              <a${titleAttr} aria-label=\"${item.getName()}\" data-neo-bn=\"button.addBlock\" ${NewBlockMenu.BUTTON_INFO}=\"${item.getHandle()}\">\n                ${item.getName()}\n              </a>\n            </li>`)\n      } else if (type === 'group') {\n        if (currentGroup === null || lastGroupHadBlockTypes) {\n          buttonsHtml.push(`\n              </ul>`)\n        }\n\n        lastGroupHadBlockTypes = false\n        currentGroup = item.isBlank() || ungroupChildBlockTypes ? null : item\n\n        if (currentGroup === null) {\n          buttonsHtml.push(`\n              <ul>`)\n        }\n      }\n    }\n\n    buttonsHtml.push(`\n          </ul>\n        </div>\n      </div>`)\n\n    return $(buttonsHtml.join(''))\n  }\n\n  getField () {\n    return this._field\n  }\n\n  getBlockTypes () {\n    return Array.from(this._blockTypes)\n  }\n\n  getBlockTypeGroups () {\n    return Array.from(this._blockTypeGroups)\n  }\n\n  getBlockTypeByButton ($button) {\n    const btHandle = $button.attr(NewBlockMenu.BUTTON_INFO)\n\n    return this._blockTypes.find(bt => bt.getHandle() === btHandle)\n  }\n\n  updateState (blocks = [], additionalCheck = null, block = null) {\n    additionalCheck = typeof additionalCheck === 'boolean' ? additionalCheck : true\n\n    const that = this\n\n    const totalTopBlocks = blocks.filter(block => block.isTopLevel()).length\n    const maxBlocksMet = this._maxBlocks > 0 && blocks.length >= this._maxBlocks\n    const maxTopBlocksMet = this._maxTopBlocks > 0 && totalTopBlocks >= this._maxTopBlocks\n\n    const allDisabled = maxBlocksMet || maxTopBlocksMet || !additionalCheck\n\n    this.$blockButtons.each(function () {\n      const $button = $(this)\n      let disabled = allDisabled\n\n      if (!disabled) {\n        const blockHasSameType = b => b.getBlockType().getHandle() === blockType.getHandle()\n        const blockType = that.getBlockTypeByButton($button)\n        const blocksOfType = blocks.filter(blockHasSameType)\n        const maxBlocksOfType = blockType.getMaxBlocks()\n\n        const maxSiblingBlocks = blockType.getMaxSiblingBlocks()\n        const siblingBlocksOfType = block !== null\n          ? block.getChildren(blocks).filter(blockHasSameType)\n          // This is at the top level\n          : blocks.filter(b => b.isTopLevel() && b.getBlockType().getHandle() === blockType.getHandle())\n\n        disabled ||= (maxBlocksOfType > 0 && blocksOfType.length >= maxBlocksOfType) ||\n          (maxSiblingBlocks > 0 && siblingBlocksOfType.length >= maxSiblingBlocks)\n      }\n\n      $button.toggleClass('disabled', disabled)\n    })\n\n    this.$groupButtons.each(function () {\n      const $button = $(this)\n      const menu = $button.data('menubtn')\n      let disabled = allDisabled\n\n      if (!disabled && menu) {\n        const $menuButtons = menu.menu.$options\n        disabled = $menuButtons.length === $menuButtons.filter('.disabled').length\n      }\n\n      $button.toggleClass('disabled', disabled)\n    })\n  }\n\n  updateResponsiveness () {}\n}\n\nconst GarnishNewBlockMenu = Garnish.Base.extend({\n\n  init (buttons) {\n    this._buttons = buttons\n    this.$container = this._buttons.$container\n    this.addListener(this._buttons.$blockButtons, 'activate', '@newBlock')\n  },\n\n  initUi () {\n    this._buttons.initUi()\n  },\n\n  getBlockTypes () {\n    return this._buttons.getBlockTypes()\n  },\n\n  getGroups () {\n    return this._buttons.getBlockTypeGroups()\n  },\n\n  getMaxBlocks () {\n    return this._maxBlocks\n  },\n\n  updateButtonStates (blocks = [], additionalCheck = null, block = null) {\n    this._buttons.updateState(blocks, additionalCheck, block)\n  },\n\n  updateState (blocks = [], additionalCheck = null, block = null) {\n    this._buttons.updateState(blocks, additionalCheck, block)\n  },\n\n  updateResponsiveness () {\n    this._buttons.updateResponsiveness()\n  },\n\n  getBlockTypeByButton ($button) {\n    return this._buttons.getBlockTypeByButton($button)\n  },\n\n  '@newBlock' (e) {\n    const $button = $(e.currentTarget)\n    const blockTypeHandle = $button.attr(NewBlockMenu.BUTTON_INFO)\n    const blockType = this._buttons.getBlockTypes().find(bt => bt.getHandle() === blockTypeHandle)\n\n    this.trigger('newBlock', {\n      blockType\n    })\n  }\n})\n\nexport { NewBlockMenu, GarnishNewBlockMenu }\n","import $ from 'jquery'\nimport { NewBlockMenu, GarnishNewBlockMenu } from './NewBlockMenu'\n\nclass Buttons extends NewBlockMenu {\n  initUi () {\n    $('.menubtn', this.$container).menubtn()\n    this.updateResponsiveness()\n\n    // If no buttons were rendered (e.g. if all valid block types are disabled for the user), hide the button container\n    if (this.$buttonsContainer.children().length === 0) {\n      const parent = this.$container.parent()\n      const grandParent = parent.parent()\n      const childrenContainer = grandParent.children('.ni_blocks')\n\n      if (childrenContainer.length === 0 || childrenContainer.children().length === 0) {\n        grandParent.addClass('hidden')\n      } else {\n        parent.addClass('hidden')\n      }\n    }\n  }\n\n  updateResponsiveness () {\n    this._buttonsContainerWidth ||= this.$buttonsContainer.width()\n    const isMobile = this.$container.width() < this._buttonsContainerWidth\n\n    this.$buttonsContainer.toggleClass('hidden', isMobile)\n    this.$menuContainer.toggleClass('hidden', !isMobile)\n  }\n}\n\nexport default GarnishNewBlockMenu.extend({\n  init (settings = {}) {\n    this.base(new Buttons(settings))\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport { NewBlockMenu, GarnishNewBlockMenu } from './NewBlockMenu'\n\nclass ButtonsGrid extends NewBlockMenu {\n  /**\n   * @inheritdoc\n   */\n  renderButtons () {\n    const ownerBlockType = this.$ownerContainer?.hasClass('ni_block')\n      ? this.$ownerContainer.attr('class').match(/ni_block--([^\\s]+)/)[1]\n      : null\n    const ungroupChildBlockTypes = ownerBlockType !== null &&\n      !this.getField().getBlockTypeByHandle(ownerBlockType).getGroupChildBlockTypes()\n    const buttonsHtml = []\n    let currentGroup = null\n\n    buttonsHtml.push(`\n        <div class=\"ni_buttons\">\n          <div class=\"btn dashed add icon menubtn\" data-neo-bn=\"container.menu\">\n            ${Craft.t('neo', 'Add a block')}\n          </div>`)\n\n    currentGroup = null\n    let lastGroupHadBlockTypes = false\n    buttonsHtml.push(`\n          <div class=\"menu ni_newblockgrid\" data-neo-bn=\"container.buttons\">`)\n\n    for (const item of this._items) {\n      const type = item.getType()\n\n      if (type === 'blockType') {\n        // Ignore disabled block types, or block types for which the current user isn't allowed to create blocks\n        if (!item.getEnabled() || !item.isCreatableByUser()) {\n          continue\n        }\n\n        if (!lastGroupHadBlockTypes) {\n          lastGroupHadBlockTypes = true\n\n          if (currentGroup !== null) {\n            buttonsHtml.push(`\n            <h6>${currentGroup.getName()}</h6>`)\n          }\n\n          buttonsHtml.push(`\n            <ul class=\"padded\">`)\n        }\n\n        const titleAttr = item.getDescription() ? ` title=\"${item.getDescription()}\"` : ''\n        const blockTypeIconId = `fields-ni-icon-${this.getField().getName()}-${item.getHandle()}`\n        const hasBlockTypeIcon = this._field?.$container.closest('form').find(`#${blockTypeIconId}`).length > 0 ?? false\n        buttonsHtml.push(`\n              <li>\n                <a${titleAttr} aria-label=\"${item.getName()}\" data-neo-bn=\"button.addBlock\" ${NewBlockMenu.BUTTON_INFO}=\"${item.getHandle()}\">`)\n\n        if (hasBlockTypeIcon) {\n          buttonsHtml.push(`\n                  <svg class=\"ni_newblockgrid_icon\">\n                    <use href=\"#${blockTypeIconId}\"></use>\n                  </svg>`)\n        } else {\n          buttonsHtml.push(`\n                  <div class=\"ni_newblockgrid_icon defaulticon\">\n                  </div>`)\n        }\n\n        buttonsHtml.push(`\n                  <span>${item.getName()}</span>\n                </a>\n              </li>`)\n      } else if (type === 'group') {\n        if (lastGroupHadBlockTypes) {\n          buttonsHtml.push(`\n            </ul>`)\n        }\n\n        lastGroupHadBlockTypes = false\n        currentGroup = item.isBlank() || ungroupChildBlockTypes ? null : item\n      }\n    }\n\n    buttonsHtml.push(`\n          </ul>\n        </div>\n      </div>`)\n\n    return $(buttonsHtml.join(''))\n  }\n\n  initUi () {\n    $('.menubtn', this.$container).menubtn()\n    this.updateResponsiveness()\n\n    // If no buttons were rendered (e.g. if all valid block types are disabled for the user), hide the button container\n    if (this.$buttonsContainer.find('[data-neo-bn=\"button.addBlock\"]').length === 0) {\n      const parent = this.$container.parent()\n      const grandParent = parent.parent()\n      const childrenContainer = grandParent.children('.ni_blocks')\n\n      if (childrenContainer.length === 0 || childrenContainer.children().length === 0) {\n        grandParent.addClass('hidden')\n      } else {\n        parent.addClass('hidden')\n      }\n    }\n  }\n}\n\nexport default GarnishNewBlockMenu.extend({\n  init (settings = {}) {\n    this.base(new ButtonsGrid(settings))\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport { NewBlockMenu, GarnishNewBlockMenu } from './NewBlockMenu'\n\nclass ButtonsList extends NewBlockMenu {\n  /**\n   * @inheritdoc\n   */\n  renderButtons () {\n    const ownerBlockType = this.$ownerContainer?.hasClass('ni_block')\n      ? this.$ownerContainer.attr('class').match(/ni_block--([^\\s]+)/)[1]\n      : null\n    const ungroupChildBlockTypes = ownerBlockType !== null &&\n      !this.getField().getBlockTypeByHandle(ownerBlockType).getGroupChildBlockTypes()\n    const buttonsHtml = []\n    let currentGroup = null\n\n    buttonsHtml.push(`\n      <div class=\"ni_buttons\">\n        <div class=\"btn dashed add icon menubtn\" data-neo-bn=\"container.menu\">\n          ${Craft.t('neo', 'Add a block')}\n        </div>`)\n\n    let lastGroupHadBlockTypes = false\n    buttonsHtml.push(`\n        <div class=\"menu ni_newblocklist\" data-neo-bn=\"container.buttons\">`)\n\n    for (const item of this._items) {\n      const type = item.getType()\n\n      if (type === 'blockType') {\n        // Ignore disabled block types, or block types for which the current user isn't allowed to create blocks\n        if (!item.getEnabled() || !item.isCreatableByUser()) {\n          continue\n        }\n\n        if (!lastGroupHadBlockTypes) {\n          lastGroupHadBlockTypes = true\n\n          if (currentGroup !== null) {\n            buttonsHtml.push(`\n            <h6>${currentGroup.getName()}</h6>`)\n          }\n\n          buttonsHtml.push(`\n            <ul class=\"padded\">`)\n        }\n\n        const titleAttr = item.getDescription() ? ` title=\"${item.getDescription()}\"` : ''\n        const blockTypeIconId = `fields-ni-icon-${this.getField().getName()}-${item.getHandle()}`\n        const hasBlockTypeIcon = this._field?.$container.closest('form').find(`#${blockTypeIconId}`).length > 0 ?? false\n        buttonsHtml.push(`\n              <li>\n                <a${titleAttr} class=\"flex\" aria-label=\"${item.getName()}\" data-neo-bn=\"button.addBlock\" ${NewBlockMenu.BUTTON_INFO}=\"${item.getHandle()}\">`)\n\n        if (hasBlockTypeIcon) {\n          buttonsHtml.push(`\n                  <svg class=\"ni_newblocklist_icon\">\n                    <use href=\"#${blockTypeIconId}\"></use>\n                  </svg>`)\n        } else {\n          buttonsHtml.push(`\n                  <div class=\"ni_newblocklist_icon defaulticon\">\n                  </div>`)\n        }\n\n        buttonsHtml.push(`\n                  <span>${item.getName()}</span>\n                </a>\n              </li>`)\n      } else if (type === 'group') {\n        if (lastGroupHadBlockTypes) {\n          buttonsHtml.push(`\n            </ul>`)\n        }\n\n        lastGroupHadBlockTypes = false\n        currentGroup = item.isBlank() || ungroupChildBlockTypes ? null : item\n      }\n    }\n\n    buttonsHtml.push(`\n          </ul>\n        </div>\n      </div>`)\n\n    return $(buttonsHtml.join(''))\n  }\n\n  initUi () {\n    $('.menubtn', this.$container).menubtn()\n    this.updateResponsiveness()\n\n    // If no buttons were rendered (e.g. if all valid block types are disabled for the user), hide the button container\n    if (this.$buttonsContainer.find('[data-neo-bn=\"button.addBlock\"]').length === 0) {\n      const parent = this.$container.parent()\n      const grandParent = parent.parent()\n      const childrenContainer = grandParent.children('.ni_blocks')\n\n      if (childrenContainer.length === 0 || childrenContainer.children().length === 0) {\n        grandParent.addClass('hidden')\n      } else {\n        parent.addClass('hidden')\n      }\n    }\n  }\n}\n\nexport default GarnishNewBlockMenu.extend({\n  init (settings = {}) {\n    this.base(new ButtonsList(settings))\n  }\n})\n","/*\nThe `_registerDynamicBlockConditions()` and `_updateVisibleElements()` methods are based on a large\nsection of `Craft.ElementEditor.saveDraft()` from Craft CMS 4.3.6.1, by Pixel & Tonic, Inc.\nhttps://github.com/craftcms/cms/blob/4.3.6.1/src/web/assets/cp/src/js/ElementEditor.js#L1144\nCraft CMS is released under the terms of the Craft License, a copy of which is included below.\nhttps://github.com/craftcms/cms/blob/4.3.6.1/LICENSE.md\n\nCopyright © Pixel & Tonic\n\nPermission is hereby granted to any person obtaining a copy of this software\n(the “Software”) to use, copy, modify, merge, publish and/or distribute copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n1. **Don’t plagiarize.** The above copyright notice and this license shall be\n   included in all copies or substantial portions of the Software.\n\n2. **Don’t use the same license on more than one project.** Each licensed copy\n   of the Software shall be actively installed in no more than one production\n   environment at a time.\n\n3. **Don’t mess with the licensing features.** Software features related to\n   licensing shall not be altered or circumvented in any way, including (but\n   not limited to) license validation, payment prompts, feature restrictions,\n   and update eligibility.\n\n4. **Pay up.** Payment shall be made immediately upon receipt of any notice,\n   prompt, reminder, or other message indicating that a payment is owed.\n\n5. **Follow the law.** All use of the Software shall not violate any applicable\n   law or regulation, nor infringe the rights of any other person or entity.\n\nFailure to comply with the foregoing conditions will automatically and\nimmediately result in termination of the permission granted hereby. This\nlicense does not include any right to receive updates to the Software or\ntechnical support. Licensees bear all risk related to the quality and\nperformance of the Software and any modifications made or obtained to it,\nincluding liability for actual and consequential harm, such as loss or\ncorruption of data, and any necessary service, repair, or correction.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER\nLIABILITY, INCLUDING SPECIAL, INCIDENTAL AND CONSEQUENTIAL DAMAGES, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from './namespace'\nimport BlockSort from './BlockSort'\nimport BlockType from './BlockType'\nimport Group from './Group'\nimport Block from './Block'\nimport Buttons from './Buttons'\nimport ButtonsGrid from './ButtonsGrid'\nimport ButtonsList from './ButtonsList'\n\nconst _defaults = {\n  name: null,\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blocks: [],\n  inputId: null,\n  maxBlocks: 0,\n  maxTopBlocks: 0,\n  minLevels: 0,\n  maxLevels: 0,\n  ownerId: null\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _name: null,\n  _siteId: null,\n  _visibleLayoutElements: {},\n  _newBlockCount: 0,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypes = []\n    this._groups = settings.groups.map(gInfo => new Group(gInfo))\n    this._blocks = []\n    this._id = settings.id\n    this._name = settings.name\n    this._minBlocks = settings.minBlocks\n    this._maxBlocks = settings.maxBlocks\n    this._maxTopBlocks = settings.maxTopBlocks\n    this._minLevels = settings.minLevels\n    this._maxLevels = settings.maxLevels\n    this._ownerId = settings.ownerId\n    this._showBlockTypeHandles = settings.showBlockTypeHandles\n\n    const animate = !Garnish.prefersReducedMotion()\n    this._$spinner = $(`<div class=\"ni_spinner\">${animate ? '<div class=\"spinner\"></div>' : Craft.t('neo', 'Loading')}</div>`)\n\n    switch (settings.newBlockMenuStyle) {\n      case 'grid':\n        this.ButtonClass = ButtonsGrid\n        break\n      case 'list':\n        this.ButtonClass = ButtonsList\n        break\n      default:\n        this.ButtonClass = Buttons\n    }\n\n    const ownerIdElement = $('[name=\"setId\"], [name=\"entryId\"], [name=\"categoryId\"]')\n    if (ownerIdElement.length) {\n      this._ownerId = ownerIdElement.val()\n    }\n\n    this.$container = $('#' + settings.inputId)\n\n    const setGroupIds = {}\n    this._groups.forEach(group => {\n      setGroupIds[group.getId()] = true\n    })\n\n    const tempBlockTypes = {}\n\n    for (const btInfo of settings.blockTypes) {\n      // Filter out the block type if its group isn't included\n      if (btInfo.groupId === null || typeof setGroupIds[btInfo.groupId] !== 'undefined') {\n        const blockType = new BlockType(Object.assign({ field: this }, btInfo))\n        this._blockTypes.push(blockType)\n        tempBlockTypes[blockType.getHandle()] = blockType\n      }\n    }\n\n    this.$form = this.$container.closest('form')\n    this._siteId = this.$form.find('input[name=\"siteId\"]').val()\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$blocksContainer = $neo.filter('[data-neo=\"container.blocks\"]')\n    this.$buttonsContainer = $neo.filter('[data-neo=\"container.buttons\"]')\n\n    this._buttons = new this.ButtonClass({\n      $ownerContainer: this.$container,\n      field: this,\n      blockTypes: this.getBlockTypes(true),\n      groups: this.getGroups(),\n      maxBlocks: this.getMaxBlocks(),\n      maxTopBlocks: this.getMaxTopBlocks()\n    })\n\n    this.$buttonsContainer.append(this._buttons.$container)\n    this._buttons.on('newBlock', e => this['@newBlock'](e))\n    this._buttons.initUi()\n\n    this._blockSort = new BlockSort({\n      container: this.$blocksContainer,\n      handle: '[data-neo-b$=\".button.move\"]',\n      maxTopBlocks: this.getMaxTopBlocks(),\n      filter: () => {\n        // Only return all the selected items if the target item is selected\n        if (this._blockSort.$targetItem.hasClass('is-selected')) {\n          return this.blockSelect.getSelectedItems()\n        }\n\n        return this._blockSort.$targetItem\n      },\n      collapseDraggees: true,\n      magnetStrength: 4,\n      helperLagBase: 1.5,\n      helperOpacity: 0.9,\n      onDragStart: () => {\n        this.$form.data('elementEditor')?.pause()\n      },\n      onDragStop: () => {\n        this.$form.data('elementEditor')?.resume()\n        this._updateBlockOrder()\n        this._updateButtons()\n      }\n    })\n\n    this.blockSelect = new Garnish.Select(this.$blocksContainer, null, {\n      multi: true,\n      vertical: true,\n      handle: '> .ni_block_topbar [data-neo-b$=\".select\"]',\n      checkboxMode: true,\n      selectedClass: 'is-selected sel'\n    })\n\n    this.$blocksContainer.find('.ni_block').each((i, blockDiv) => {\n      const $block = $(blockDiv)\n      const bInfo = {}\n      bInfo.id = $block.attr('data-neo-b-id')\n      bInfo.sortOrder = i\n      bInfo.collapsed = $block.hasClass('is-collapsed')\n      bInfo.enabled = !!$block.find(`[data-neo-b=\"${bInfo.id}.input.enabled\"]`).val()\n      bInfo.level = parseInt($block.find(`[data-neo-b=\"${bInfo.id}.input.level\"]`).val())\n      bInfo.field = this\n      bInfo.namespace = [...this._templateNs, bInfo.id]\n\n      const blockTypeHandle = $block.find(`[data-neo-b=\"${bInfo.id}.input.type\"]`).val()\n      const blockType = tempBlockTypes[blockTypeHandle]\n\n      // If the block type data isn't there, it's been filtered out and the blocks shouldn't be included\n      if (typeof blockType === 'undefined') {\n        $block.remove()\n        return\n      }\n\n      bInfo.blockType = blockType\n      bInfo.showButtons = !this.atMaxLevels(bInfo.level)\n\n      const block = new Block(bInfo)\n      block.initUi(false)\n      this._setBlockEvents(block)\n\n      $block.data('block', block)\n      this._blocks.push(block)\n      this._blockSort.addBlock(block)\n      this.blockSelect.addItems(block.$container)\n    })\n\n    this._updateBlockChildren()\n    this._updateButtons()\n\n    // Create any required top level blocks, if this field has only one top level block type\n    if (this._minBlocks > 0) {\n      const missingBlockCount = this._minBlocks - this._blocks.length\n      const topLevelBlockTypes = this.getBlockTypes(true)\n\n      if (topLevelBlockTypes.length === 1 && missingBlockCount > 0) {\n        for (let i = this._blocks.length; i < this._minBlocks; i++) {\n          this['@newBlock']({\n            blockType: topLevelBlockTypes[0],\n            createChildBlocks: false,\n            index: i,\n            level: 1\n          })\n        }\n      }\n    }\n\n    // Make sure menu states (for pasting blocks) are updated when changing browser tabs\n    this.addListener(document, 'visibilitychange.input', () => this._updateButtons())\n\n    this.addListener(this.$container, 'resize', () => this.updateResponsiveness())\n\n    const serialized = typeof this.$form.data('serializer') === 'function'\n      ? this.$form.data('serializer')()\n      : this.$form.serialize()\n    this.$form.data('initialSerializedValue', serialized)\n\n    // Add error highlight for Matrix fields within Neo\n    this._setMatrixClassErrors()\n    this._setBlockTypeClassErrors()\n\n    this._blocks\n      .filter(block => !block.isExpanded())\n      .forEach(block => block.updatePreview())\n\n    this._registerDynamicBlockConditions()\n\n    this.trigger('afterInit')\n  },\n\n  /**\n   * @public\n   * @returns the field's ID\n   * @since 4.2.0\n   */\n  getId () {\n    return this._id\n  },\n\n  getName () {\n    return this._name\n  },\n\n  updateResponsiveness () {\n    for (const block of this._blocks) {\n      block.updateResponsiveness()\n      block.getButtons()?.updateResponsiveness()\n    }\n\n    this._buttons.updateResponsiveness()\n    this._tempButtons?.updateResponsiveness()\n  },\n\n  addBlock (block, index = -1, level = 1, animate = null, createChildBlocks = true) {\n    this._newBlockCount++\n    this.$form.data('elementEditor')?.pause()\n    const blockCount = this._blocks.length\n    index = index >= 0 ? Math.max(0, Math.min(index, blockCount)) : blockCount\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    const prevBlock = index > 0 ? this._blocks[index - 1] : false\n    const nextBlock = index < blockCount ? this._blocks[index] : false\n\n    if (!prevBlock) {\n      this.$blocksContainer.prepend(block.$container)\n    } else {\n      const minLevel = nextBlock ? nextBlock.getLevel() : 1\n      const maxLevel = prevBlock.getLevel() + (prevBlock.getBlockType().isParent() ? 1 : 0)\n\n      level = Math.max(minLevel, Math.min(level, maxLevel))\n\n      const prevBlockOnLevel = this._findPrevBlockOnLevel(index, level)\n\n      if (prevBlockOnLevel) {\n        prevBlockOnLevel.$container.after(block.$container)\n      } else {\n        prevBlock.$blocksContainer.prepend(block.$container)\n      }\n    }\n\n    block.setLevel(level)\n\n    block.$container.data('block', block)\n    this._blocks.push(block)\n    this._blockSort.addBlock(block)\n    this.blockSelect.addItems(block.$container)\n\n    block.initUi()\n    this._setBlockEvents(block)\n    this._destroyTempButtons()\n    this._updateBlockOrder()\n    this._updateBlockChildren()\n    this._updateButtons()\n\n    // Construct the block's visible layout elements, since they might not be the default visible\n    // layout elements for the block type, e.g. if pasting a block\n    const visibleLayoutElements = {}\n    block.$contentContainer.children('[data-layout-tab]').each((_, layoutTab) => {\n      const tabUid = layoutTab.getAttribute('data-layout-tab')\n      visibleLayoutElements[tabUid] = []\n      layoutTab.querySelectorAll(':scope > [data-layout-element]:not([data-layout-element-placeholder])')\n        .forEach((layoutElement) => {\n          visibleLayoutElements[tabUid].push(layoutElement.getAttribute('data-layout-element'))\n        })\n    })\n    this._visibleLayoutElements[block.getId()] = visibleLayoutElements\n\n    // Create any required child blocks, if this block has only one child block type\n    const createChildBlocksIfAllowed = () => {\n      if (createChildBlocks) {\n        const blockType = block.getBlockType()\n        const minChildBlocks = blockType.getMinChildBlocks()\n\n        if (minChildBlocks > 0) {\n          let childBlockTypes = blockType.getChildBlocks()\n\n          if (childBlockTypes === '*') {\n            childBlockTypes = this.getBlockTypes()\n          }\n\n          if (childBlockTypes.length === 1) {\n            const childBlockType = this.getBlockTypeByHandle(childBlockTypes[0])\n\n            for (let i = 0; i < minChildBlocks; i++) {\n              this['@newBlock']({\n                blockType: childBlockType,\n                createChildBlocks: false,\n                index: index + i + 1,\n                level: level + 1\n              })\n            }\n          }\n        }\n      }\n\n      this.$form.data('elementEditor')?.resume()\n    }\n\n    if (animate) {\n      block.$container\n        .css({\n          opacity: 0,\n          marginBottom: -(block.$container.outerHeight())\n        })\n        .velocity({\n          opacity: 1,\n          marginBottom: 10\n        }, 'fast', _ => Garnish.requestAnimationFrame(() => {\n          Garnish.scrollContainerToElement(block.$container)\n          createChildBlocksIfAllowed()\n        }))\n    } else {\n      createChildBlocksIfAllowed()\n    }\n\n    this.trigger('addBlock', {\n      block,\n      index\n    })\n  },\n\n  removeBlock (block, animate = null, _delayAnimate = null) {\n    this.$form.data('elementEditor')?.pause()\n\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n    _delayAnimate = typeof _delayAnimate === 'boolean' ? _delayAnimate : false\n\n    const childBlocks = this._findChildBlocks(this._blocks.indexOf(block))\n    for (const childBlock of childBlocks) {\n      this.removeBlock(childBlock, true, true)\n    }\n\n    block.off('.input')\n\n    this._blocks = this._blocks.filter(b => b !== block)\n    this._blockSort.removeItems(block.$container)\n    this.blockSelect.removeItems(block.$container)\n\n    this._destroyTempButtons()\n    this._updateButtons()\n\n    const finishTheRemoval = () => {\n      block.$container.remove()\n      this._updateBlockChildren()\n      this.$form.data('elementEditor')?.resume()\n    }\n\n    if (animate) {\n      block.$container\n        .css({\n          opacity: 1,\n          marginBottom: 10\n        })\n        .velocity({\n          opacity: 0,\n          marginBottom: _delayAnimate ? 10 : -(block.$container.outerHeight())\n        }, 'fast', _ => finishTheRemoval())\n    } else {\n      finishTheRemoval()\n    }\n\n    block.destroy()\n\n    this.trigger('removeBlock', {\n      block\n    })\n  },\n\n  _setBlockEvents (block) {\n    block.on('removeBlock.input', _ => {\n      if (this.getSelectedBlocks().length > 1) {\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete the selected blocks?'))) {\n          this._blockBatch(block, b => this.removeBlock(b))\n        }\n      } else {\n        this.removeBlock(block)\n      }\n    })\n    block.on('toggleEnabled.input', e => this._blockBatch(block, b => b.toggleEnabled(e.enabled)))\n    block.on('toggleExpansion.input', e => this._blockBatch(block, b => b.toggleExpansion(e.expanded)))\n    block.on('moveUpBlock.input', _ => this._moveBlock(block, 'up'))\n    block.on('moveDownBlock.input', _ => this._moveBlock(block, 'down'))\n    block.on('newBlock.input', e => this['@newBlock'](Object.assign(e, { index: this._getNextBlockIndex(block) })))\n    block.on('addBlockAbove.input', e => this['@addBlockAbove'](e))\n    block.on('copyBlock.input', e => this['@copyBlock'](e))\n    block.on('pasteBlock.input', e => this['@pasteBlock'](e))\n    block.on('duplicateBlock.input', e => this['@duplicateBlock'](e))\n    block.on('change.input', () => this.trigger('change', { block }))\n  },\n\n  _moveBlock (block, direction, animate = true) {\n    if (!['up', 'down'].includes(direction)) {\n      return\n    }\n\n    this.$form.data('elementEditor')?.pause()\n\n    const siblings = block.getSiblings(this.getBlocks())\n    const index = siblings.indexOf(block)\n    const moveUp = index > 0 && direction === 'up'\n    const moveDown = index < siblings.length - 1 && direction === 'down'\n\n    if (index === -1 || moveUp === moveDown) {\n      return\n    }\n\n    const animateMove = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n    const $block = block.$container\n\n    const startTheMove = () => {\n      $block.detach()\n\n      if (moveUp) {\n        siblings[index - 1].$container.before($block)\n      } else {\n        siblings[index + 1].$container.after($block)\n      }\n    }\n\n    const finishTheMove = () => {\n      this._updateBlockOrder()\n      this._updateButtons()\n      this.$form.data('elementEditor')?.resume()\n    }\n\n    if (animateMove) {\n      $block\n        .css({\n          opacity: 1,\n          marginBottom: 10\n        })\n        .velocity({\n          opacity: 0,\n          marginBottom: -($block.outerHeight())\n        }, 'fast', _ => {\n          startTheMove()\n\n          $block\n            .css({\n              opacity: 0,\n              marginBottom: -($block.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 10\n            }, 'fast', _ => {\n              finishTheMove()\n              Garnish.requestAnimationFrame(() => Garnish.scrollContainerToElement($block))\n            })\n        })\n    } else {\n      startTheMove()\n      finishTheMove()\n    }\n  },\n\n  getBlockByElement ($block) {\n    return $($block).data('block')\n  },\n\n  getBlocks (level = 0) {\n    return level > 0 ? this._blocks.filter(b => b.getLevel() === level) : Array.from(this._blocks)\n  },\n\n  getBlockTypeById (id) {\n    return this._blockTypes.find(bt => bt.getId() === id)\n  },\n\n  getBlockTypeByHandle (handle) {\n    return this._blockTypes.find(bt => bt.getHandle() === handle)\n  },\n\n  getBlockTypes (topLevelOnly) {\n    topLevelOnly = typeof topLevelOnly === 'boolean' ? topLevelOnly : false\n\n    return topLevelOnly\n      ? this._blockTypes.filter(bt => bt.getTopLevel())\n      : Array.from(this._blockTypes)\n  },\n\n  getGroups () {\n    return Array.from(this._groups)\n  },\n\n  getItems () {\n    return [...this.getBlockTypes(), ...this.getGroups()].sort((a, b) => a.getSortOrder() - b.getSortOrder())\n  },\n\n  getMaxBlocks () {\n    return this._maxBlocks\n  },\n\n  getMaxTopBlocks () {\n    return this._maxTopBlocks\n  },\n\n  getMinLevels () {\n    return this._minLevels\n  },\n\n  getMaxLevels () {\n    return this._maxLevels\n  },\n\n  atMaxLevels (level) {\n    return this._maxLevels > 0 && level + 1 > this._maxLevels\n  },\n\n  getSelectedBlocks () {\n    const $selectedBlocks = this.blockSelect.getSelectedItems()\n    return this._blocks.filter(block => block.$container.closest($selectedBlocks).length > 0)\n  },\n\n  getCopiedBlocks () {\n    const copyData = window.localStorage.getItem(`neo:copy:${this._name}`)\n\n    if (!copyData) {\n      return []\n    }\n\n    const { blocks } = JSON.parse(copyData)\n    return blocks\n  },\n\n  setVisibleElements (blockId, visibleLayoutElements) {\n    // visibleLayoutElements might (will probably) be a JSON-encoded string\n    if (typeof visibleLayoutElements === 'string') {\n      visibleLayoutElements = JSON.parse(visibleLayoutElements)\n    }\n\n    const block = this._blocks.find((block) => block.getId() === blockId)\n\n    if (block === null) {\n      return\n    }\n\n    this._visibleLayoutElements[blockId] = visibleLayoutElements\n  },\n\n  /**\n   * @since 3.9.2\n   */\n  getNamespace () {\n    return Array.from(this._templateNs)\n  },\n\n  /**\n   * @since 3.9.3\n   */\n  getOwnerId () {\n    return this._ownerId\n  },\n\n  /**\n   * @since 3.9.5\n   */\n  getSiteId () {\n    return this._siteId\n  },\n\n  /**\n   * @since 4.2.4\n   */\n  getUnsavedIds () {\n    return this.$blocksContainer.find('.ni_block[data-neo-b-id^=\"new\"]')\n      .map((_, element) => element.getAttribute('data-neo-b-id').substring(3))\n      .get()\n  },\n\n  _setMatrixClassErrors () {\n    // TODO: will need probably need to find a method within php instead of JS\n    // temp solution for now.\n    const matrixErrors = $('.ni_block_body .matrix-field .input.errors')\n\n    matrixErrors.each(function () {\n      const _this = $(this)\n      const tabContainer = _this.closest('.ni_block_content_tab')\n      const tabData = tabContainer.data('neo-b-info')\n      const closestContainer = _this.closest('.ni_block')\n      const bar = closestContainer.find('.tabs .tab[data-neo-b-info=\"' + tabData + '\"]')\n\n      if (bar.length) {\n        bar.addClass('has-errors')\n      }\n    })\n  },\n\n  _setBlockTypeClassErrors () {\n    const tabErrors = $('.ni_block .tab.has-errors')\n\n    tabErrors.each(function () {\n      const parents = tabErrors.parents('.ni_block.is-collapsed')\n\n      parents.each(function () {\n        const _this = $(this)\n        _this.find('> .ni_block_topbar .title .blocktype').addClass('has-errors')\n      })\n    })\n  },\n\n  _updateBlockOrder () {\n    const blocks = []\n\n    this.$blocksContainer.find('.ni_block').each((index, element) => {\n      const block = this.getBlockByElement(element)\n      blocks.push(block)\n    })\n\n    this._blocks = blocks\n    this.trigger('updateBlockOrder')\n    this.trigger('change', { block: null })\n  },\n\n  _updateBlockChildren () {\n    for (const block of this._blocks) {\n      const children = block.$blocksContainer.children('.ni_block')\n      const collapsedCount = Math.min(children.length, 8) // Any more than 8 and it's a little too big\n      const collapsedChildren = []\n\n      for (let i = 0; i < collapsedCount; i++) {\n        collapsedChildren.push('<div class=\"ni_block_collapsed-children_child\"></div>')\n      }\n\n      block.$collapsedChildrenContainer.html(collapsedChildren.join(''))\n    }\n  },\n\n  _checkMaxChildren (block) {\n    if (!block) {\n      return true\n    }\n\n    const blockType = block.getBlockType()\n    const maxChildren = blockType.getMaxChildBlocks()\n\n    if (maxChildren > 0) {\n      const children = this._findChildBlocks(block)\n\n      return children.length < maxChildren\n    }\n\n    return true\n  },\n\n  _updateButtons () {\n    const blocks = this.getBlocks()\n    this._buttons.updateButtonStates(blocks)\n    this._tempButtons?.updateButtonStates(blocks, this._checkMaxChildren(this._tempButtonsBlock))\n\n    for (const block of blocks) {\n      block.updateActionsMenu()\n      block.getButtons()?.updateButtonStates(blocks, this._checkMaxChildren(block), block)\n      block.toggleShowButtons(!this.atMaxLevels(block.getLevel()))\n    }\n  },\n\n  _blockBatch (block, callback) {\n    const blocks = block.isSelected() ? this.getSelectedBlocks() : [block]\n\n    for (const b of blocks) {\n      callback(b)\n    }\n  },\n\n  _destroyTempButtons (animate = null) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (this._tempButtons) {\n      const buttons = this._tempButtons\n      buttons.off('newBlock')\n\n      if (animate) {\n        buttons.$container\n          .css({\n            opacity: 1,\n            marginBottom: 10\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -(buttons.$container.outerHeight())\n          }, 'fast', e => buttons.$container.remove())\n      } else {\n        buttons.$container.remove()\n      }\n\n      this._tempButtons = null\n      this._tempButtonsBlock = null\n    }\n  },\n\n  _findPrevBlockOnLevel (index, level) {\n    if (index instanceof Block) {\n      index = this._blocks.indexOf(index)\n    }\n\n    const blocks = this._blocks\n\n    let block = blocks[--index]\n    let lowestLevel = Number.MAX_VALUE\n\n    while (block) {\n      const blockLevel = block.getLevel()\n\n      if (blockLevel < lowestLevel) {\n        if (blockLevel === level) {\n          return block\n        }\n\n        lowestLevel = blockLevel\n      }\n\n      block = this._blocks[--index]\n    }\n\n    return false\n  },\n\n  _findChildBlocks (index, descendants = null) {\n    if (index instanceof Block) {\n      index = this._blocks.indexOf(index)\n    }\n\n    descendants = (typeof descendants === 'boolean' ? descendants : false)\n    const block = this._blocks[index]\n\n    return block ? block.getChildren(this._blocks, descendants) : []\n  },\n\n  _findParentBlock (index) {\n    if (index instanceof Block) {\n      index = this._blocks.indexOf(index)\n    }\n\n    const blocks = this._blocks\n    const block = blocks[index]\n\n    if (block) {\n      const level = block.getLevel()\n\n      if (level > 1) {\n        let i = index\n        let currentBlock = block\n\n        while (currentBlock && currentBlock.getLevel() >= level) {\n          currentBlock = blocks[--i]\n        }\n\n        return currentBlock\n      }\n    }\n\n    return null\n  },\n\n  _getNextBlockIndex (index) {\n    // If undefined, then there's no previous block and the 'next' block will be the first block\n    if (typeof index === 'undefined') {\n      return 0\n    }\n\n    if (index instanceof Block) {\n      index = this._blocks.indexOf(index)\n    }\n\n    const descendants = this._findChildBlocks(index, true)\n    const lastDescendant = descendants[descendants.length - 1]\n\n    return (lastDescendant ? this._blocks.indexOf(lastDescendant) : index) + 1\n  },\n\n  /**\n   * @private\n   */\n  _registerDynamicBlockConditions () {\n    // A small timeout to let the element editor initialise\n    setTimeout(\n      () => this.$form.data('elementEditor')?.on('update', () => this._updateAllVisibleElements()),\n      200\n    )\n  },\n\n  async _updateAllVisibleElements () {\n    const checkNumber = Math.floor(Math.random() * 1000000)\n    this._lastFormCheck = checkNumber\n    const elementEditor = this.$form.data('elementEditor')\n\n    // Do nothing if the draft is being resaved, or there's no element editor data\n    if (elementEditor?.submittingForm ?? true) {\n      return\n    }\n\n    // Don't update visible elements if the draft save was the result of creating a new block\n    if (this._newBlockCount > 0) {\n      this._newBlockCount--\n      return\n    }\n\n    const siteId = elementEditor.settings.siteId\n    NS.enter(this.getNamespace())\n    const data = {\n      namespace: NS.toFieldName(),\n      blocks: {},\n      sortOrder: [],\n      blockUuids: [],\n      fieldId: this._id,\n      ownerCanonicalId: this._ownerId,\n      ownerDraftId: elementEditor.settings.draftId,\n      isProvisionalDraft: elementEditor.settings.isProvisionalDraft,\n      siteId\n    }\n    NS.leave()\n    const originalBlockIds = {}\n    this._blocks.forEach((block) => {\n      const selectedTabId = block.$contentContainer\n        .children('[data-layout-tab]:not(.hidden)')\n        .data('layout-tab')\n      data.blocks[block.getDuplicatedBlockId()] = {\n        selectedTab: selectedTabId ?? null,\n        visibleLayoutElements: this._visibleLayoutElements[block.getId()] ?? {}\n      }\n      data.sortOrder.push(block.getDuplicatedBlockId())\n      data.blockUuids.push(block.getUuid())\n      originalBlockIds[block.getDuplicatedBlockId()] = block.getId()\n    })\n\n    try {\n      const response = await Craft.sendActionRequest('POST', 'neo/input/update-visible-elements', { data })\n\n      // Ignore the response if the form has since been edited\n      if (this._lastFormCheck !== checkNumber) {\n        return\n      }\n\n      for (const blockId in response.data.blocks) {\n        const block = this._blocks.find((block) => block.getId() === originalBlockIds[blockId])\n        this._updateVisibleElements(\n          block,\n          response.data.blocks[blockId],\n          data.blocks[block.getDuplicatedBlockId()].selectedTabId\n        )\n      }\n    } catch (err) {\n      Craft.cp.displayError(err)\n      throw err\n    }\n  },\n\n  /**\n   * @private\n   */\n  _updateVisibleElements (block, blockData, selectedTabId) {\n    let $allTabContainers = $()\n    const visibleLayoutElements = {}\n    let changedElements = false\n\n    for (let i = 0; i < blockData.missingElements.length; i++) {\n      const tabInfo = blockData.missingElements[i]\n      let $tabContainer = block.$contentContainer.children(\n        `[data-layout-tab=\"${tabInfo.uid}\"]`\n      )\n\n      if (!$tabContainer.length) {\n        $tabContainer = $('<div/>', {\n          id: block.namespaceId(tabInfo.id),\n          class: 'flex-fields',\n          'data-id': tabInfo.id,\n          'data-layout-tab': tabInfo.uid\n        })\n        if (tabInfo.id !== selectedTabId) {\n          $tabContainer.addClass('hidden')\n        }\n        $tabContainer.appendTo(block.$contentContainer)\n      }\n\n      $allTabContainers = $allTabContainers.add($tabContainer)\n\n      for (let j = 0; j < tabInfo.elements.length; j++) {\n        const elementInfo = tabInfo.elements[j]\n\n        if (elementInfo.html !== false) {\n          if (!visibleLayoutElements[tabInfo.uid]) {\n            visibleLayoutElements[tabInfo.uid] = []\n          }\n          visibleLayoutElements[tabInfo.uid].push(elementInfo.uid)\n\n          if (typeof elementInfo.html === 'string') {\n            const html = elementInfo.html.replaceAll('__NEOBLOCK__', block.getId())\n            const $oldElement = $tabContainer.children(\n              `[data-layout-element=\"${elementInfo.uid}\"]`\n            )\n            const $newElement = $(html)\n            if ($oldElement.length) {\n              $oldElement.replaceWith($newElement)\n            } else {\n              $newElement.appendTo($tabContainer)\n            }\n            Craft.initUiElements($newElement)\n            if ($newElement.hasClass('ni_child-blocks-ui-element')) {\n              block.resetButtons()\n            }\n            changedElements = true\n          }\n        } else {\n          const $oldElement = $tabContainer.children(\n            `[data-layout-element=\"${elementInfo.uid}\"]`\n          )\n          if (\n            !$oldElement.length ||\n            !Garnish.hasAttr(\n              $oldElement,\n              'data-layout-element-placeholder'\n            )\n          ) {\n            const $placeholder = $('<div/>', {\n              class: 'hidden',\n              'data-layout-element': elementInfo.uid,\n              'data-layout-element-placeholder': ''\n            })\n\n            if ($oldElement.length) {\n              $oldElement.replaceWith($placeholder)\n            } else {\n              $placeholder.appendTo($tabContainer)\n            }\n\n            changedElements = true\n          }\n        }\n      }\n\n      if (changedElements) {\n        this._updateButtons()\n      }\n    }\n\n    // Remove any unused tab content containers\n    // (`[data-layout-tab=\"\"]` == unconditional containers, so ignore those)\n    const $unusedTabContainers = block.$contentContainer\n      .children('[data-layout-tab]')\n      .not($allTabContainers)\n      .not('[data-layout-tab=\"\"]')\n    if ($unusedTabContainers.length) {\n      $unusedTabContainers.remove()\n      changedElements = true\n    }\n\n    // Make the first tab visible if no others are\n    if (!$allTabContainers.filter(':not(.hidden)').length) {\n      $allTabContainers.first().removeClass('hidden')\n    }\n\n    this._visibleLayoutElements[block.getId()] = visibleLayoutElements\n\n    // Update the tabs\n    // Unfortunately can't use `block.getDuplicatedBlockId()` because it doesn't work here for new blocks\n    const idToReplace = blockData.tabs?.match(/data-neo-b=\"([0-9]+).container.tabs\"/)?.pop() ?? null\n    const tabsHtml = idToReplace\n      ? blockData.tabs.replaceAll(idToReplace, block.getId())\n      : blockData.tabs\n    const $tabsHtml = $(tabsHtml)\n    const $tabsOuterContainer = block.$topbarRightContainer.find('.tabs')\n    $tabsOuterContainer.empty().append($tabsHtml)\n    block.initTabs()\n    block.updateResponsiveness()\n\n    Craft.appendHeadHtml(blockData.headHtml.replaceAll('__NEOBLOCK__', block.getId()))\n    Craft.appendBodyHtml(blockData.bodyHtml.replaceAll('__NEOBLOCK__', block.getId()))\n\n    // Did any layout elements get added or removed?\n    if (changedElements && blockData.initialDeltaValues) {\n      Object.assign(\n        this.$form.data('initial-delta-values'),\n        blockData.initialDeltaValues\n      )\n    }\n  },\n\n  _addSpinnerAfter (block) {\n    if (typeof block !== 'undefined') {\n      block.$container.after(this._$spinner)\n    } else {\n      this.$blocksContainer.prepend(this._$spinner)\n    }\n\n    this._animateSpinner()\n  },\n\n  _addSpinnerBefore (block) {\n    if (typeof block !== 'undefined') {\n      block.$container.before(this._$spinner)\n    } else {\n      this.$blocksContainer.append(this._$spinner)\n    }\n\n    this._animateSpinner()\n  },\n\n  _animateSpinner () {\n    if (Garnish.prefersReducedMotion()) {\n      return Promise.resolve()\n    }\n\n    return new Promise((resolve, reject) => {\n      try {\n        this._$spinner\n          .css({\n            opacity: 0,\n            marginBottom: -(this._$spinner.outerHeight())\n          })\n          .velocity({\n            opacity: 1,\n            marginBottom: 10\n          }, 'fast', () => resolve())\n      } catch (err) {\n        reject(err)\n      }\n    })\n  },\n\n  _removeSpinner () {\n    this._$spinner.remove()\n  },\n\n  async _duplicate (data, block) {\n    data.unsavedIds = this.getUnsavedIds()\n    try {\n      this.$form.data('elementEditor')?.pause()\n      await this._addSpinnerAfter(block)\n      const response = await Craft.sendActionRequest('POST', 'neo/input/render-blocks', { data })\n      const newBlocks = []\n\n      for (const renderedBlock of response.data.blocks) {\n        const newBlockId = renderedBlock.id\n        const newBlock = new Block({\n          namespace: [...this._templateNs, newBlockId],\n          field: this,\n          blockType: this.getBlockTypeById(renderedBlock.type),\n          blockHtml: renderedBlock.blockHtml,\n          bodyHtml: renderedBlock.bodyHtml,\n          headHtml: renderedBlock.headHtml,\n          id: newBlockId,\n          uuid: renderedBlock.uuid,\n          level: renderedBlock.level | 0,\n          enabled: !!renderedBlock.enabled,\n          collapsed: !!renderedBlock.collapsed,\n          showButtons: !this.atMaxLevels(renderedBlock.level | 0),\n          showBlockTypeHandle: this._showBlockTypeHandles\n        }, true)\n\n        newBlocks.push(newBlock)\n      }\n\n      let newIndex = this._getNextBlockIndex(block)\n\n      for (const newBlock of newBlocks) {\n        this.addBlock(newBlock, newIndex++, newBlock.getLevel(), false)\n      }\n\n      if (!Garnish.prefersReducedMotion() && newBlocks.length > 0) {\n        const firstBlock = newBlocks[0]\n\n        firstBlock.$container\n          .css({\n            opacity: 0,\n            marginBottom: this._$spinner.outerHeight() - firstBlock.$container.outerHeight() + 10\n          })\n          .velocity({\n            opacity: 1,\n            marginBottom: 10\n          }, 'fast', _ => Garnish.requestAnimationFrame(() => Garnish.scrollContainerToElement(firstBlock.$container)))\n      }\n    } catch (err) {\n      Craft.cp.displayError(err.message)\n    } finally {\n      this._removeSpinner()\n      this.$form.data('elementEditor')?.resume()\n    }\n  },\n\n  async '@newBlock' (e) {\n    const elementEditor = this.$form.data('elementEditor')\n\n    try {\n      elementEditor?.pause()\n      const level = e.level ?? 1\n      const loopStartingPoint = typeof e.index !== 'undefined'\n        ? Math.min(e.index - 1, this._blocks.length - 1)\n        : this._blocks.length - 1\n      let siblingBlock\n      let addAfter = true\n\n      for (let i = loopStartingPoint; i >= 0; i--) {\n        // Look for the previous block at the same level as the new block, to add the spinner after\n        if (this._blocks[i].getLevel() === level) {\n          siblingBlock = this._blocks[i]\n          break\n        }\n\n        // If we've gone to a lower level, any future block we find at the same level won't be a\n        // sibling of the new block, so we need to add the spinner before the last block we checked\n        if (this._blocks[i].getLevel() < level) {\n          siblingBlock = this._blocks[i + 1]\n          addAfter = false\n          break\n        }\n      }\n\n      if (addAfter) {\n        await this._addSpinnerAfter(siblingBlock)\n      } else {\n        await this._addSpinnerBefore(siblingBlock)\n      }\n\n      const prevSiblingId = addAfter ? siblingBlock?.getDuplicatedBlockId() : null\n      const parentId = siblingBlock?.getParent()?.getDuplicatedBlockId() ?? null\n      const newBlock = await e.blockType.newBlock({\n        prevSiblingId: prevSiblingId ?? null,\n        parentId,\n        level,\n        ownerId: elementEditor?.settings.elementId ?? this._ownerId\n      })\n      const blockId = newBlock.id\n      const block = new Block({\n        namespace: [...this._templateNs, blockId],\n        field: this,\n        blockType: e.blockType,\n        id: blockId,\n        uuid: newBlock.uuid,\n        blockHtml: newBlock.blockHtml,\n        bodyHtml: newBlock.bodyHtml,\n        headHtml: newBlock.headHtml,\n        showButtons: !this.atMaxLevels(e.level),\n        showBlockTypeHandle: this._showBlockTypeHandles\n      }, true)\n\n      this._removeSpinner()\n      this.addBlock(block, e.index, e.level, e.createChildBlocks, e.createChildBlocks)\n    } catch (error) {\n      this._removeSpinner()\n      console.error(error)\n      Craft.cp.displayError(error.message)\n    } finally {\n      elementEditor?.resume()\n    }\n  },\n\n  '@addBlockAbove' (e) {\n    this._destroyTempButtons()\n\n    const animate = !Garnish.prefersReducedMotion() && e.animate !== false\n    const block = e.block\n    const index = this._blocks.indexOf(block)\n    const parent = this._findParentBlock(index)\n    const blocks = this.getBlocks()\n    const buttons = new this.ButtonClass({\n      $ownerContainer: block.isTopLevel() ? this.$container : block.getParent().$container,\n      field: this,\n      blockTypes: !parent ? this.getBlockTypes(true) : [],\n      blocks,\n      groups: !parent ? this.getGroups() : [],\n      items: parent ? parent.getBlockType().getChildBlockItems(this.getItems()) : null,\n      maxBlocks: this.getMaxBlocks()\n    })\n\n    block.$container.before(buttons.$container)\n\n    buttons.on('newBlock', e => this['@newBlock']({\n      blockType: e.blockType,\n      index,\n      level: block.getLevel()\n    }))\n\n    buttons.initUi()\n\n    if (animate) {\n      buttons.$container\n        .css({\n          opacity: 0,\n          marginBottom: -(buttons.$container.outerHeight())\n        })\n        .velocity({\n          opacity: 1,\n          marginBottom: 10\n        }, 'fast', _ => Garnish.requestAnimationFrame(() => Garnish.scrollContainerToElement(buttons.$container)))\n    }\n\n    this._tempButtons = buttons\n    this._tempButtonsBlock = this._findParentBlock(block)\n\n    this._tempButtons.updateButtonStates(blocks, this._checkMaxChildren(this._tempButtonsBlock), this._tempButtonsBlock)\n  },\n\n  '@copyBlock' (e) {\n    // Get the selected blocks and their descendants\n    const blockGroups = []\n    let blockCount = 0\n\n    this._blockBatch(e.block, (block) => {\n      // To prevent block descendants from being copied multiple times, determine whether the current block has\n      // been added to the most recently added group.\n      const blockAdded = blockCount > 0 && blockGroups[blockGroups.length - 1].indexOf(block) !== -1\n\n      if (!blockAdded) {\n        const newGroup = []\n        newGroup.push(block, ...this._findChildBlocks(block, true))\n        blockGroups.push(newGroup)\n        blockCount += newGroup.length\n      }\n    })\n\n    // Collect the relevant data from those blocks to be stored for pasting\n    const data = {\n      field: this._name,\n      blocks: []\n    }\n\n    for (const group of blockGroups) {\n      const firstBlockLevel = group[0].getLevel() - 1\n\n      for (const block of group) {\n        const blockData = {\n          type: block.getBlockType().getId(),\n          level: block.getLevel() - firstBlockLevel,\n          content: block.getContent()\n        }\n\n        if (block.isEnabled()) {\n          blockData.enabled = 1\n        }\n\n        if (!block.isExpanded()) {\n          blockData.collapsed = 1\n        }\n\n        data.blocks.push(blockData)\n      }\n    }\n\n    window.localStorage.setItem(`neo:copy:${this._name}`, JSON.stringify(data))\n\n    this._updateButtons()\n\n    const notice = blockCount === 1 ? '1 block copied' : '{n} blocks copied'\n    Craft.cp.displayNotice(Craft.t('neo', notice, { n: blockCount }))\n  },\n\n  '@pasteBlock' (e) {\n    const block = e.block\n    const baseLevel = (block?.getLevel() ?? 1) - 1\n    const blocks = this.getCopiedBlocks()\n\n    if (blocks.length > 0) {\n      for (const pasteBlock of blocks) {\n        pasteBlock.level += baseLevel\n\n        // Ensure the block data has the current owner ID\n        pasteBlock.ownerId = this._ownerId\n      }\n\n      NS.enter(this._templateNs)\n\n      const data = {\n        namespace: NS.toFieldName(),\n        fieldId: this._id,\n        siteId: this._siteId,\n        blocks\n      }\n\n      NS.leave()\n\n      this._duplicate(data, block)\n    }\n  },\n\n  '@duplicateBlock' (e) {\n    const block = e.block\n    const blockIndex = this._blocks.indexOf(block)\n    const subBlocks = this._findChildBlocks(blockIndex, true)\n    const ownerId = this._ownerId\n\n    const getBlockData = block => {\n      return {\n        collapsed: !block.isExpanded() | 0,\n        content: block.getContent(),\n        enabled: block.isEnabled() | 0,\n        level: block.getLevel(),\n        ownerId,\n        type: block.getBlockType().getId()\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    const data = {\n      namespace: NS.toFieldName(),\n      fieldId: this._id,\n      siteId: this._siteId,\n      blocks: [\n        getBlockData(block),\n        ...subBlocks.map(getBlockData)\n      ]\n    }\n\n    NS.leave()\n\n    this._duplicate(data, block)\n  }\n})\n","import Input from './Input'\n\nconst context = window ?? this\nconst inputs = []\n\ncontext.Neo = {\n  Input,\n  inputs,\n\n  createInput (settings = {}) {\n    const input = new Input(settings)\n    inputs.push(input)\n\n    return input\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","Garnish","Craft","_stack","enter","segments","join","this","fromFieldName","joined","getNamespace","push","enterByFieldName","fieldName","leave","length","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","toString","slice","match","BlockSort","extend","$container","blocks","maxTopBlocks","_draggeeBlocks","init","items","settings","defaults","axis","base","container","getHelperTargetX","$draggee","offset","left","getHelperTargetY","magnet","magnetStrength","draggeeOffsetY","top","mouseY","mouseOffsetY","getBlockByElement","$block","find","block","is","getParentBlock","$parentBlock","parent","closest","onDragStart","that","each","_calculateMidpoints","onDrag","midpoint","_getClosestMidpoint","_moveDraggeeToBlock","type","direction","onDragStop","setLevel","parentBlock","getLevel","$childBlock","childBlock","returnHelpersToDraggees","addBlock","addItems","removeBlock","filter","b","removeItems","minDistance","Number","MAX_VALUE","maxDistance","MIN_VALUE","_currentMidpoints","DIRECTION_UP","position","_draggeeBlockHeight","_draggeeBlockY","height","midpoints","_getBlockMidpoints","keys","DIRECTION_DOWN","endMidpoint","TYPE_END","isExpanded","blockHeight","topbarHeight","$topbarContainer","childrenHeight","$childrenContainer","preChildrenContentHeight","$contentContainer","_validateDraggeeChildren","TYPE_CONTENT","buttonsHeight","getButtons","TYPE_CHILDREN","validChild","$blocksContainer","append","after","before","getBlockType","isParent","prepend","_updateHelperAppearance","field","getField","maxLevels","getMaxLevels","parentLevel","firstDraggeeLevel","blockExceedsMax","blockOrDescendantExceedsMax","descendants","getChildren","getBlocks","some","topBlocks","children","topBlocksCount","draggeeBlock","getTopLevel","includes","blockType","maxChildBlocks","getMaxChildBlocks","blockChildren","blockChildCount","blockChildrenWithoutDraggees","checkedDraggeeBlocks","isValidChildBlock","draggeeBlockType","maxSiblingBlocks","getMaxSiblingBlocks","draggeeBlocksOfType","getHandle","$helper","helpers","id","data","css","width","_defaults","fieldLayoutId","sortOrder","name","handle","maxBlocks","groupChildBlockTypes","childBlocks","topLevel","tabNames","hasChildBlocksUiElement","creatableByUser","deletableByUser","editableByUser","assign","_id","_field","_fieldLayoutId","_sortOrder","_name","_handle","_description","description","_enabled","enabled","_minBlocks","minBlocks","_maxBlocks","_minSiblingBlocks","_maxSiblingBlocks","_minChildBlocks","minChildBlocks","_maxChildBlocks","_groupChildBlockTypes","_childBlocks","_topLevel","_tabNames","_html","tabs","html","_js","js","_defaultVisibleLayoutElements","visibleLayoutElements","_hasChildBlocksUiElement","_creatableByUser","_deletableByUser","_editableByUser","getType","getId","getFieldLayoutId","getSortOrder","getName","getDescription","getEnabled","getMinBlocks","getMaxBlocks","getMinSiblingBlocks","getMinChildBlocks","getGroupChildBlockTypes","getChildBlocks","getTabNames","newBlock","namespace","fieldId","siteId","getSiteId","unsavedIds","getUnsavedIds","collapsed","level","ownerId","getOwnerId","getDefaultVisibleLayoutElements","getChildBlockItems","firstPass","item","hasChildBlock","i","nextItem","cb","isArray","isCreatableByUser","isDeletableByUser","isEditableByUser","alwaysShowDropdown","_alwaysShowDropdown","getAlwaysShowDropdown","isBlank","buttons","modified","showButtons","showBlockTypeHandle","_escapeMap","_escapeHTML","str","s","_limit","l","_templateNs","_blockType","_initialised","_expanded","_modified","_initialState","_forceModified","_blockHtml","blockHtml","_bodyHtml","bodyHtml","_headHtml","headHtml","_initialEnabled","_showButtons","_renderOldChildBlocksContainer","_uuid","uuid","$neo","$bodyContainer","$topbarLeftContainer","$topbarRightContainer","$handleContainer","$tabContainer","$menuContainer","$previewContainer","$settingsButton","$togglerButton","$enabledInput","$levelInput","$collapsedInput","$status","$sortOrder","$form","resetButtons","hasErrors","tabName","selector","$tabButton","addClass","toggleExpansion","toggleShowButtons","addListener","initUi","callInitUiElements","initTabs","_settingsMenu","on","hasClass","forEach","toggleSettingsMenu","removeClass","_handleActionClick","_handleActionKeydown","toggleEnabled","_buttons","updateResponsiveness","e","parents","_","cbuiElement","$tabContent","tabIndex","index","eq","add","isNew","_level","content","_getPostData","detectChange","_detectChange","observer","window","MutationObserver","setTimeout","observe","attributes","childList","characterData","subtree","_detectChangeObserver","toggleClass","addFieldLinks","trigger","$tabsButton","$tabsContainer","_tabsMenu","_handleTabKeydown","getHtml","getJs","destroy","$foot","remove","clearInterval","_detectChangeInterval","disconnect","getUuid","getDuplicatedBlockId","draftElementIds","isTopLevel","val","setModified","isModified","_siteId","$siteId","getContent","rawContent","setValue","currentSet","rawName","getParent","blockParent","currentBlock","currentLevel","getSiblings","updatePreview","condensed","$childFields","$fields","previewText","$field","$input","fieldType","label","text","values","$assets","$asset","$thumbContainer","srcset","title","checked","color","colorText","colorRev","background","date","time","$subInputs","$subInput","subValue","$selectedType","first","$visibleOption","visibleInputVal","$visibleElement","customText","lines","test","isSelected","collapse","save","animate","expand","expandContainer","collapseContainer","expandedCss","opacity","outerHeight","collapsedCss","clearCss","velocity","saveExpansion","expanded","sentBlockId","isProvisionalDraft","blockId","Promise","resolve","reject","then","catch","disable","enable","triggerEvent","blockTypeEnabled","actuallyEnabled","enableContainer","disableContainer","isEnabled","show","$buttonsContainer","$childrenWarningsContainer","selectTab","tabUid","attr","retryAll","isMobileBrowser","_topbarLeftWidth","_topbarRightWidth","hasRoomForIndividualTabs","updateActionsMenu","parentBlockType","allowedBlockTypes","getBlockTypes","map","bt","getBlockTypeByHandle","getMaxTopBlocks","noAllowedBlockTypes","blocksOfType","maxBlockTypes","siblingBlocks","totalTopBlocks","allDisabled","addDisabled","typeDisabled","cloneDisabled","pasteData","JSON","localStorage","getItem","pasteDisabled","childBlockCount","pasteBlockCount","hasSameBlockType","siblingBlockCount","pasteSiblingBlockCount","currentBlockTypesById","reduce","m","v","count","pasteBlock","pasteBlockTypeObj","pasteBlockType","currentBlocksOfTypeCount","maxPasteBlockTypes","pasteTypeDisabled","siblingIndex","disableMoveUp","disableMoveDown","$collapsedChildrenContainer","ButtonClass","$ownerContainer","getItems","namespaceId","namespacedId","toggle","hide","preventDefault","keyCode","elementEditor","enableAutosave","draftId","initial","badKeys","startsWith","option","target","classList","contains","dataset","action","$checkFrom","isLeft","isRight","pause","resume","currentTarget","blockTypes","groups","NewBlockMenu","static","_blockTypes","_blockTypeGroups","constructor","_items","sort","_maxTopBlocks","renderButtons","$blockButtons","$groupButtons","updateState","ownerBlockType","ungroupChildBlockTypes","buttonsHtml","blockTypesHtml","currentGroup","firstButton","generateGroupDropdown","titleAttr","BUTTON_INFO","lastGroupHadBlockTypes","getBlockTypeGroups","getBlockTypeByButton","$button","btHandle","additionalCheck","maxBlocksMet","maxTopBlocksMet","disabled","blockHasSameType","maxBlocksOfType","siblingBlocksOfType","menu","$menuButtons","$options","GarnishNewBlockMenu","getGroups","updateButtonStates","blockTypeHandle","Buttons","menubtn","grandParent","childrenContainer","_buttonsContainerWidth","isMobile","ButtonsGrid","blockTypeIconId","hasBlockTypeIcon","ButtonsList","inputId","minLevels","_visibleLayoutElements","_newBlockCount","_groups","gInfo","Group","_blocks","_minLevels","_maxLevels","_ownerId","_showBlockTypeHandles","showBlockTypeHandles","_$spinner","newBlockMenuStyle","ownerIdElement","setGroupIds","group","tempBlockTypes","btInfo","groupId","BlockType","_blockSort","$targetItem","blockSelect","getSelectedItems","collapseDraggees","helperLagBase","helperOpacity","_updateBlockOrder","_updateButtons","multi","vertical","checkboxMode","selectedClass","blockDiv","bInfo","parseInt","atMaxLevels","Block","_setBlockEvents","_updateBlockChildren","missingBlockCount","topLevelBlockTypes","createChildBlocks","document","serialized","serialize","_setMatrixClassErrors","_setBlockTypeClassErrors","_registerDynamicBlockConditions","_tempButtons","blockCount","Math","max","min","prevBlock","nextBlock","minLevel","maxLevel","prevBlockOnLevel","_findPrevBlockOnLevel","_destroyTempButtons","layoutTab","getAttribute","querySelectorAll","layoutElement","createChildBlocksIfAllowed","childBlockTypes","childBlockType","marginBottom","_delayAnimate","_findChildBlocks","off","finishTheRemoval","getSelectedBlocks","confirm","_blockBatch","_moveBlock","_getNextBlockIndex","siblings","moveUp","moveDown","animateMove","startTheMove","detach","finishTheMove","getBlockTypeById","topLevelOnly","getMinLevels","$selectedBlocks","getCopiedBlocks","copyData","setVisibleElements","element","substring","_this","tabData","bar","tabErrors","collapsedCount","collapsedChildren","_checkMaxChildren","maxChildren","_tempButtonsBlock","callback","lowestLevel","blockLevel","_findParentBlock","lastDescendant","_updateAllVisibleElements","checkNumber","floor","random","_lastFormCheck","submittingForm","blockUuids","ownerCanonicalId","ownerDraftId","originalBlockIds","selectedTabId","selectedTab","response","_updateVisibleElements","err","displayError","blockData","$allTabContainers","changedElements","missingElements","tabInfo","uid","class","appendTo","j","elements","elementInfo","replaceAll","$oldElement","$newElement","replaceWith","$placeholder","$unusedTabContainers","not","idToReplace","tabsHtml","$tabsHtml","empty","initialDeltaValues","_addSpinnerAfter","_animateSpinner","_addSpinnerBefore","_removeSpinner","_duplicate","newBlocks","renderedBlock","newBlockId","newIndex","firstBlock","message","loopStartingPoint","siblingBlock","addAfter","prevSiblingId","parentId","elementId","error","console","blockGroups","newGroup","firstBlockLevel","setItem","stringify","notice","displayNotice","n","baseLevel","blockIndex","subBlocks","getBlockData","context","inputs","Neo","Input","createInput","input"],"sourceRoot":""}